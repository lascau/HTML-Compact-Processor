/* The following code was generated by JFlex 1.4.3 on 11/10/20 10:46 PM */


package work;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/10/20 10:46 PM from the specification file
 * <tt>C:/Users/Lascau/Desktop/HTML-Compact-Processor/TranslatorDesignProject/src/work/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 56,  0, 18, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 52,  2,  0, 
     0, 19, 21,  6,  4, 10, 47, 39, 15, 45, 51, 49, 34, 28, 25,  5, 
     9, 43, 16, 31,  7, 35, 41,  0, 37,  8,  0,  0,  0,  0,  0,  0, 
     0, 20, 22, 23, 29, 30, 48, 40, 11, 46, 51, 50, 14, 13, 26, 24, 
    33, 44, 17, 32, 12, 36, 42, 55, 38, 27, 54,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\21\1\1\4\4\0\1\5"+
    "\5\0\1\6\1\7\3\0\1\10\1\11\2\0\1\12"+
    "\1\13\52\0\1\14\1\0\1\15\1\0\1\16\3\0"+
    "\1\17\5\0\1\20\1\21\1\0\1\22\1\23\6\0"+
    "\1\24\2\0\1\25\1\26\3\0\1\27\35\0\1\30"+
    "\16\0\1\31\72\0\1\32\1\33\1\34\1\35\3\0"+
    "\1\36\11\0\1\37\3\0\1\40\31\0\1\41\14\0"+
    "\1\42\5\0\1\43\12\0\1\44\10\0\1\45\3\0"+
    "\1\46\1\47\15\0\1\50\4\0\1\51\14\0\1\52"+
    "\1\53\1\54\1\55\1\0\1\56\6\0\1\57\66\0"+
    "\1\60\3\0\1\61\7\0\1\62\1\63\2\0\1\64"+
    "\1\0\1\65\1\66\1\0\1\67\4\0\1\70\6\0"+
    "\1\71\1\72\1\0\1\73\1\0\1\74\6\0\1\75"+
    "\2\0\1\76\1\77\3\0\1\100\12\0\1\101\20\0"+
    "\1\102\17\0\1\103\1\104\1\105\1\0\1\106\4\0"+
    "\1\107\1\110\4\0\1\111\2\0\1\112\3\0\1\113"+
    "\1\114\64\0\1\115\13\0\1\116\1\117\1\120\1\0"+
    "\1\121\1\0\1\122\1\0\1\123\1\124\1\125\1\126"+
    "\4\0\1\127\12\0\1\130\3\0\1\131\11\0\1\132"+
    "\4\0\1\133\15\0\1\134\1\135\1\136\1\137\1\0"+
    "\1\140\6\0\1\141\12\0\1\142\3\0\1\143\1\144"+
    "\2\0\1\145\16\0\1\146\1\147\1\150\27\0\1\151"+
    "\3\0\1\152\12\0\1\153\1\154\1\0\1\155\2\0"+
    "\1\156\1\0\1\157\4\0\1\160\3\0\1\161\7\0"+
    "\1\162\1\163\2\0\1\164\4\0\1\165\1\166\1\167"+
    "\1\0\1\170\5\0\1\171\1\172\4\0\1\173\2\0"+
    "\1\174\3\0\1\175\1\176\4\0\1\177\2\0\1\200"+
    "\2\0\1\201\1\202\1\203\1\204\1\205\1\0\1\206"+
    "\3\0\1\207\2\0\1\210\1\211\5\0\1\212\1\0"+
    "\1\213\13\0\1\214\4\0\1\215\1\0\1\216\5\0"+
    "\1\217\14\0\1\220\2\0\1\221\10\0\1\222\1\223"+
    "\1\224\1\0\1\225\1\0\1\226\13\0\1\227\3\0"+
    "\1\230\1\231\2\0\1\232\2\0\1\233\1\234\4\0"+
    "\1\235\5\0\1\236\5\0\1\237\1\240\5\0\1\241"+
    "\1\0\1\242\10\0\1\243\1\244\3\0\1\245\1\246"+
    "\3\0\1\247\1\250\1\0\1\251\1\252\1\253\2\0"+
    "\1\254\1\255\1\0\1\256\2\0\1\257\1\0\1\260"+
    "\3\0\1\261\2\0\1\262\2\0\1\263\1\264\1\265"+
    "\1\266\1\267\1\0\1\270\3\0\1\271\1\272\1\273"+
    "\1\274\1\275\1\0\1\276\1\277\2\0\1\300\2\0"+
    "\1\301\1\0\1\302\4\0\1\303\3\0\1\304\1\305"+
    "\2\0\1\306\1\307\1\310\1\0\1\311\1\0\1\312"+
    "\2\0\1\313\2\0\1\314\1\315\1\316\4\0\1\317"+
    "\5\0\1\320\1\0\1\321\1\0\1\322\1\323\1\324"+
    "\1\325\1\326\2\0\1\327\1\0\1\330\1\0\1\331"+
    "\1\332\1\333\2\0\1\334\1\335\1\336\1\337\1\340"+
    "\1\341\2\0\1\342\3\0\1\343\1\0\1\344\2\0"+
    "\1\345\3\0\1\346\1\347\1\350\1\351\2\0\1\352"+
    "\1\353";

  private static int [] zzUnpackAction() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\71\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\71\0\u12b4\0\71"+
    "\0\u12ed\0\71\0\u1326\0\u135f\0\u1398\0\71\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\71\0\71\0\u14ee\0\u1527\0\71"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\71\0\u16b6"+
    "\0\u16ef\0\71\0\71\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\71\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\71\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\71\0\71"+
    "\0\71\0\71\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\71"+
    "\0\u316e\0\u31a7\0\u31e0\0\71\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\71\0\u37aa\0\u37e3"+
    "\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\71\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a"+
    "\0\71\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\71\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\71\0\u3f75\0\u3fae\0\u3fe7"+
    "\0\71\0\71\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d"+
    "\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\71"+
    "\0\u4305\0\u433e\0\u4377\0\u43b0\0\71\0\u43e9\0\u4422\0\u445b"+
    "\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\71\0\71\0\71\0\71\0\u4695\0\71\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\71\0\u4824\0\u485d"+
    "\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed"+
    "\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5"+
    "\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d"+
    "\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145"+
    "\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d"+
    "\0\u5346\0\u537f\0\u53b8\0\u53f1\0\71\0\u542a\0\u5463\0\u549c"+
    "\0\71\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b"+
    "\0\71\0\71\0\u5664\0\u569d\0\71\0\u56d6\0\71\0\71"+
    "\0\u570f\0\71\0\u5748\0\u5781\0\u57ba\0\u57f3\0\71\0\u582c"+
    "\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\71\0\71\0\u5982"+
    "\0\71\0\u59bb\0\71\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8"+
    "\0\u5b11\0\71\0\u5b4a\0\u5b83\0\71\0\71\0\u5bbc\0\u5bf5"+
    "\0\u5c2e\0\71\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84"+
    "\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\71\0\u5ea1\0\u5eda\0\u5f13"+
    "\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db"+
    "\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8\0\71\0\u6231\0\u626a"+
    "\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9\0\u6432"+
    "\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\71\0\71\0\71"+
    "\0\u6588\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\71\0\71"+
    "\0\u66de\0\u6717\0\u6750\0\u6789\0\71\0\u67c2\0\u67fb\0\71"+
    "\0\u6834\0\u686d\0\u68a6\0\71\0\71\0\u68df\0\u6918\0\u6951"+
    "\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19"+
    "\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8\0\u6ce1"+
    "\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9"+
    "\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038\0\u7071"+
    "\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7\0\u7200\0\u7239"+
    "\0\u7272\0\u72ab\0\u72e4\0\u731d\0\u7356\0\u738f\0\u73c8\0\u7401"+
    "\0\u743a\0\71\0\u7473\0\u74ac\0\u74e5\0\u751e\0\u7557\0\u7590"+
    "\0\u75c9\0\u7602\0\u763b\0\u7674\0\u76ad\0\71\0\71\0\71"+
    "\0\u76e6\0\71\0\u771f\0\71\0\u7758\0\71\0\71\0\71"+
    "\0\71\0\u7791\0\u77ca\0\u7803\0\u783c\0\71\0\u7875\0\u78ae"+
    "\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u7a3d\0\u7a76"+
    "\0\71\0\u7aaf\0\u7ae8\0\u7b21\0\71\0\u7b5a\0\u7b93\0\u7bcc"+
    "\0\u7c05\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\71\0\u7d5b"+
    "\0\u7d94\0\u7dcd\0\u7e06\0\71\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea"+
    "\0\u7f23\0\u7f5c\0\u7f95\0\u7fce\0\u8007\0\u8040\0\u8079\0\u80b2"+
    "\0\u80eb\0\71\0\71\0\71\0\71\0\u8124\0\71\0\u815d"+
    "\0\u8196\0\u81cf\0\u8208\0\u8241\0\u827a\0\71\0\u82b3\0\u82ec"+
    "\0\u8325\0\u835e\0\u8397\0\u83d0\0\u8409\0\u8442\0\u847b\0\u84b4"+
    "\0\71\0\u84ed\0\u8526\0\u855f\0\71\0\71\0\u8598\0\u85d1"+
    "\0\u860a\0\u8643\0\u867c\0\u86b5\0\u86ee\0\u8727\0\u8760\0\u8799"+
    "\0\u87d2\0\u880b\0\u8844\0\u887d\0\u88b6\0\u88ef\0\u8928\0\71"+
    "\0\71\0\71\0\u8961\0\u899a\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e"+
    "\0\u8ab7\0\u8af0\0\u8b29\0\u8b62\0\u8b9b\0\u8bd4\0\u8c0d\0\u8c46"+
    "\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63\0\u8d9c\0\u8dd5\0\u8e0e"+
    "\0\u8e47\0\71\0\u8e80\0\u8eb9\0\u8ef2\0\71\0\u8f2b\0\u8f64"+
    "\0\u8f9d\0\u8fd6\0\u900f\0\u9048\0\u9081\0\u90ba\0\u90f3\0\u912c"+
    "\0\71\0\71\0\u9165\0\71\0\u919e\0\u91d7\0\71\0\u9210"+
    "\0\71\0\u9249\0\u9282\0\u92bb\0\u92f4\0\71\0\u932d\0\u9366"+
    "\0\u939f\0\71\0\u93d8\0\u9411\0\u944a\0\u9483\0\u94bc\0\u94f5"+
    "\0\u952e\0\71\0\71\0\u9567\0\u95a0\0\71\0\u95d9\0\u9612"+
    "\0\u964b\0\u9684\0\71\0\71\0\71\0\u96bd\0\71\0\u96f6"+
    "\0\u972f\0\u9768\0\u97a1\0\u97da\0\71\0\71\0\u9813\0\u984c"+
    "\0\u9885\0\u98be\0\71\0\u98f7\0\u9930\0\71\0\u9969\0\u99a2"+
    "\0\u99db\0\71\0\71\0\u9a14\0\u9a4d\0\u9a86\0\u9abf\0\71"+
    "\0\u9af8\0\u9b31\0\71\0\u9b6a\0\u9ba3\0\71\0\71\0\71"+
    "\0\71\0\71\0\u9bdc\0\71\0\u9c15\0\u9c4e\0\u9c87\0\71"+
    "\0\u9cc0\0\u9cf9\0\71\0\71\0\u9d32\0\u9d6b\0\u9da4\0\u9ddd"+
    "\0\u9e16\0\71\0\u9e4f\0\71\0\u9e88\0\u9ec1\0\u9efa\0\u9f33"+
    "\0\u9f6c\0\u9fa5\0\u9fde\0\ua017\0\ua050\0\ua089\0\ua0c2\0\71"+
    "\0\ua0fb\0\ua134\0\ua16d\0\ua1a6\0\71\0\ua1df\0\71\0\ua218"+
    "\0\ua251\0\ua28a\0\ua2c3\0\ua2fc\0\71\0\ua335\0\ua36e\0\ua3a7"+
    "\0\ua3e0\0\ua419\0\ua452\0\ua48b\0\ua4c4\0\ua4fd\0\ua536\0\ua56f"+
    "\0\ua5a8\0\71\0\ua5e1\0\ua61a\0\71\0\ua653\0\ua68c\0\ua6c5"+
    "\0\ua6fe\0\ua737\0\ua770\0\ua7a9\0\ua7e2\0\71\0\71\0\71"+
    "\0\ua81b\0\71\0\ua854\0\71\0\ua88d\0\ua8c6\0\ua8ff\0\ua938"+
    "\0\ua971\0\ua9aa\0\ua9e3\0\uaa1c\0\uaa55\0\uaa8e\0\uaac7\0\71"+
    "\0\uab00\0\uab39\0\uab72\0\71\0\71\0\uabab\0\uabe4\0\71"+
    "\0\uac1d\0\uac56\0\71\0\71\0\uac8f\0\uacc8\0\uad01\0\uad3a"+
    "\0\71\0\uad73\0\uadac\0\uade5\0\uae1e\0\uae57\0\71\0\uae90"+
    "\0\uaec9\0\uaf02\0\uaf3b\0\uaf74\0\71\0\71\0\uafad\0\uafe6"+
    "\0\ub01f\0\ub058\0\ub091\0\71\0\ub0ca\0\71\0\ub103\0\ub13c"+
    "\0\ub175\0\ub1ae\0\ub1e7\0\ub220\0\ub259\0\ub292\0\71\0\71"+
    "\0\ub2cb\0\ub304\0\ub33d\0\71\0\71\0\ub376\0\ub3af\0\ub3e8"+
    "\0\71\0\71\0\ub421\0\71\0\71\0\71\0\ub45a\0\ub493"+
    "\0\71\0\71\0\ub4cc\0\71\0\ub505\0\ub53e\0\71\0\ub577"+
    "\0\71\0\ub5b0\0\ub5e9\0\ub622\0\71\0\ub65b\0\ub694\0\71"+
    "\0\ub6cd\0\ub706\0\71\0\71\0\71\0\71\0\71\0\ub73f"+
    "\0\71\0\ub778\0\ub7b1\0\ub7ea\0\71\0\71\0\71\0\71"+
    "\0\71\0\ub823\0\71\0\71\0\ub85c\0\ub895\0\71\0\ub8ce"+
    "\0\ub907\0\71\0\ub940\0\71\0\ub979\0\ub9b2\0\ub9eb\0\uba24"+
    "\0\71\0\uba5d\0\uba96\0\ubacf\0\71\0\71\0\ubb08\0\ubb41"+
    "\0\71\0\71\0\71\0\ubb7a\0\71\0\ubbb3\0\71\0\ubbec"+
    "\0\ubc25\0\71\0\ubc5e\0\ubc97\0\71\0\71\0\71\0\ubcd0"+
    "\0\ubd09\0\ubd42\0\ubd7b\0\71\0\ubdb4\0\ubded\0\ube26\0\ube5f"+
    "\0\ube98\0\71\0\ubed1\0\71\0\ubf0a\0\71\0\71\0\71"+
    "\0\71\0\71\0\ubf43\0\ubf7c\0\71\0\ubfb5\0\71\0\ubfee"+
    "\0\71\0\71\0\71\0\uc027\0\uc060\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\uc099\0\uc0d2\0\71\0\uc10b\0\uc144"+
    "\0\uc17d\0\71\0\uc1b6\0\71\0\uc1ef\0\uc228\0\71\0\uc261"+
    "\0\uc29a\0\uc2d3\0\71\0\71\0\71\0\71\0\uc30c\0\uc345"+
    "\0\71\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\7\2\1\6\1\7\1\10"+
    "\1\11\2\2\1\12\2\2\1\13\1\2\1\14\1\15"+
    "\2\2\1\16\3\2\1\17\1\2\1\20\1\21\2\2"+
    "\1\22\5\2\1\23\3\2\1\24\10\2\1\25\1\2"+
    "\72\0\1\3\67\0\1\26\1\4\1\26\1\0\65\26"+
    "\4\0\1\27\1\30\1\31\1\32\1\0\1\33\1\34"+
    "\1\35\1\32\1\36\1\37\1\35\2\0\1\40\2\41"+
    "\2\42\1\31\1\30\2\43\1\0\1\44\1\45\1\34"+
    "\2\46\1\33\1\37\2\47\2\50\2\0\2\51\2\52"+
    "\2\53\2\54\2\55\22\0\1\56\4\0\1\57\14\0"+
    "\1\60\1\0\1\61\63\0\1\62\2\0\1\63\17\0"+
    "\1\64\36\0\1\65\11\0\1\66\5\0\1\67\102\0"+
    "\1\70\42\0\1\71\5\0\1\72\50\0\1\73\10\0"+
    "\1\74\65\0\1\75\3\0\1\76\17\0\1\77\33\0"+
    "\1\100\2\0\1\101\11\0\1\102\5\0\1\103\56\0"+
    "\1\104\3\0\1\105\72\0\1\106\51\0\1\107\1\110"+
    "\4\0\1\111\14\0\1\112\17\0\1\113\33\0\1\114"+
    "\70\0\1\115\16\0\1\116\46\0\1\117\5\0\1\120"+
    "\11\0\1\121\1\0\1\122\65\0\1\123\2\0\1\124"+
    "\106\0\1\125\12\0\3\26\1\0\65\26\4\0\1\126"+
    "\1\127\1\0\1\130\2\0\1\131\1\0\1\130\1\0"+
    "\1\132\16\0\1\126\1\131\3\0\1\132\12\0\2\133"+
    "\2\134\21\0\1\135\4\0\1\136\6\0\2\137\12\0"+
    "\1\135\1\136\33\0\1\140\4\0\1\141\10\0\2\142"+
    "\3\0\1\140\5\0\1\141\16\0\2\143\16\0\1\144"+
    "\2\0\1\145\2\0\1\146\1\147\1\145\2\0\1\147"+
    "\2\150\1\0\2\151\2\152\6\0\1\144\1\146\16\0"+
    "\2\153\30\0\1\154\1\0\2\155\1\0\2\156\15\0"+
    "\1\154\43\0\1\157\16\0\1\157\43\0\1\160\2\0"+
    "\1\161\1\0\1\160\3\0\2\162\7\0\2\163\3\0"+
    "\1\161\55\0\2\164\56\0\1\165\10\0\2\166\11\0"+
    "\1\165\16\0\2\167\16\0\1\170\1\171\1\172\1\173"+
    "\1\0\1\174\1\175\1\176\1\173\1\177\1\200\1\176"+
    "\3\0\2\201\2\202\1\172\1\171\2\203\1\0\1\204"+
    "\1\170\1\175\2\205\1\174\1\200\2\206\2\207\2\0"+
    "\2\210\2\211\2\212\2\213\2\214\12\0\1\215\1\0"+
    "\1\216\2\0\1\217\6\0\2\220\3\0\2\221\1\216"+
    "\5\0\1\215\3\0\1\217\33\0\1\222\1\223\10\0"+
    "\1\224\1\0\2\225\1\0\2\226\3\0\1\223\4\0"+
    "\1\222\4\0\1\224\2\227\10\0\2\230\17\0\1\231"+
    "\4\0\1\232\15\0\1\231\5\0\1\232\44\0\1\233"+
    "\10\0\2\164\50\0\1\126\2\0\1\130\2\0\1\131"+
    "\1\0\1\130\1\0\1\132\16\0\1\126\1\131\3\0"+
    "\1\132\12\0\2\133\2\134\16\0\1\234\1\235\1\0"+
    "\1\236\1\237\1\0\1\235\1\240\5\0\1\241\1\242"+
    "\2\0\1\234\4\0\1\240\1\0\1\237\4\0\2\243"+
    "\42\0\1\244\23\0\1\244\43\0\1\245\16\0\1\245"+
    "\57\0\2\246\61\0\1\247\13\0\2\250\1\0\1\247"+
    "\2\0\2\251\16\0\2\252\15\0\1\253\12\0\2\254"+
    "\6\0\1\253\24\0\2\255\37\0\2\256\56\0\1\257"+
    "\112\0\1\260\110\0\1\261\53\0\1\262\70\0\1\263"+
    "\75\0\1\264\36\0\1\265\122\0\1\266\36\0\1\267"+
    "\72\0\1\270\104\0\1\271\125\0\1\272\17\0\1\273"+
    "\33\0\1\274\32\0\1\275\41\0\1\276\26\0\1\277"+
    "\103\0\1\300\62\0\1\301\76\0\1\302\77\0\1\303"+
    "\70\0\1\304\47\0\1\305\1\306\11\0\1\307\1\0"+
    "\1\310\54\0\1\311\67\0\1\312\66\0\1\313\24\0"+
    "\1\314\26\0\1\315\30\0\1\316\65\0\1\317\70\0"+
    "\1\320\73\0\1\321\57\0\1\322\140\0\1\323\32\0"+
    "\1\324\72\0\1\325\74\0\1\326\110\0\1\327\30\0"+
    "\1\330\73\0\1\331\110\0\1\332\113\0\1\333\21\0"+
    "\1\334\110\0\1\335\41\0\1\336\100\0\1\337\23\0"+
    "\1\337\46\0\2\340\27\0\2\341\47\0\2\342\45\0"+
    "\1\343\4\0\1\343\137\0\1\344\11\0\1\345\11\0"+
    "\1\346\16\0\1\345\4\0\1\346\57\0\2\347\47\0"+
    "\1\350\27\0\1\350\36\0\1\351\4\0\1\351\121\0"+
    "\2\352\42\0\2\353\74\0\2\354\47\0\1\355\22\0"+
    "\1\355\47\0\1\356\4\0\1\356\77\0\2\357\56\0"+
    "\1\360\23\0\1\360\52\0\2\361\64\0\1\362\16\0"+
    "\1\362\57\0\2\363\55\0\1\364\27\0\1\364\65\0"+
    "\1\365\10\0\1\365\46\0\2\366\73\0\2\367\4\0"+
    "\2\370\34\0\1\371\2\0\1\372\2\0\1\373\1\0"+
    "\1\372\1\0\1\374\16\0\1\371\1\373\3\0\1\374"+
    "\12\0\2\375\2\376\21\0\1\377\4\0\1\u0100\6\0"+
    "\2\u0101\12\0\1\377\1\u0100\33\0\1\u0102\4\0\1\u0103"+
    "\10\0\2\u0104\3\0\1\u0102\5\0\1\u0103\16\0\2\u0105"+
    "\16\0\1\u0106\2\0\1\u0107\2\0\1\u0108\1\u0109\1\u0107"+
    "\2\0\1\u0109\2\u010a\1\0\2\u010b\2\u010c\6\0\1\u0106"+
    "\1\u0108\16\0\2\u010d\14\0\1\u010e\13\0\1\u010f\1\0"+
    "\2\u0110\1\0\2\u0111\15\0\1\u010f\43\0\1\u0112\16\0"+
    "\1\u0112\43\0\1\u0113\2\0\1\u0114\1\0\1\u0113\3\0"+
    "\2\u0115\7\0\2\u0116\3\0\1\u0114\55\0\2\u0117\56\0"+
    "\1\u0118\10\0\2\u0119\11\0\1\u0118\16\0\2\u011a\14\0"+
    "\1\u011b\1\0\1\u011c\1\0\1\u011d\2\0\1\u011e\6\0"+
    "\2\u011f\3\0\2\u0120\1\u011d\5\0\1\u011c\3\0\1\u011e"+
    "\31\0\1\u0121\1\0\1\u0122\1\u0123\10\0\1\u0124\1\0"+
    "\2\u0125\1\0\2\u0126\3\0\1\u0123\4\0\1\u0122\4\0"+
    "\1\u0124\2\u0127\10\0\2\u0128\17\0\1\u0129\4\0\1\u012a"+
    "\15\0\1\u0129\5\0\1\u012a\44\0\1\u012b\10\0\2\u0117"+
    "\46\0\1\u012c\3\0\1\u012d\1\u012e\1\0\1\u012f\1\u0130"+
    "\1\0\1\u012e\1\u0131\5\0\1\u0132\1\u0133\2\0\1\u012d"+
    "\4\0\1\u0131\1\0\1\u0130\4\0\2\u0134\26\0\1\u0135"+
    "\13\0\1\u0136\23\0\1\u0136\43\0\1\u0137\16\0\1\u0137"+
    "\57\0\2\u0138\46\0\1\u0139\70\0\1\u013a\12\0\1\u013b"+
    "\13\0\2\u013c\1\0\1\u013b\2\0\2\u013d\16\0\2\u013e"+
    "\15\0\1\u013f\12\0\2\u0140\6\0\1\u013f\24\0\2\u0141"+
    "\37\0\2\u0142\46\0\1\u0143\30\0\1\u0143\53\0\2\u0144"+
    "\60\0\1\u0145\27\0\1\u0145\41\0\1\u0146\23\0\1\u0146"+
    "\57\0\2\u0147\47\0\1\u0148\22\0\1\u0148\44\0\1\u0149"+
    "\30\0\1\u0149\40\0\1\u014a\22\0\1\u014a\77\0\2\u014b"+
    "\37\0\1\u014c\4\0\1\u014c\123\0\2\u014d\57\0\2\u014e"+
    "\16\0\2\u014f\55\0\2\u0150\31\0\1\u0151\21\0\1\u0152"+
    "\57\0\2\u0153\57\0\1\u0154\7\0\2\u0155\11\0\1\u0154"+
    "\60\0\2\u0156\62\0\1\u0157\23\0\1\u0157\51\0\2\u0158"+
    "\61\0\1\u0159\16\0\1\u0159\51\0\1\u0159\5\0\2\u0156"+
    "\7\0\1\u0159\61\0\2\u015a\53\0\1\u015b\27\0\1\u015b"+
    "\47\0\2\u015c\116\0\2\u015d\31\0\1\u015e\25\0\2\u015f"+
    "\1\u015e\104\0\2\u0160\32\0\2\u0161\67\0\2\u0162\7\0"+
    "\2\u0163\61\0\2\u0164\56\0\1\u0165\23\0\1\u0165\36\0"+
    "\1\u0166\30\0\1\u0166\74\0\1\u0167\107\0\1\u0168\60\0"+
    "\1\u0169\44\0\1\u016a\102\0\1\u016b\46\0\1\u016c\72\0"+
    "\1\u016d\70\0\1\u016e\65\0\1\u016f\71\0\1\u0170\136\0"+
    "\1\u0171\46\0\1\u0172\114\0\1\u0173\70\0\1\u0174\70\0"+
    "\1\u0175\36\0\1\u0176\15\0\1\u0177\76\0\1\u0178\74\0"+
    "\1\u0179\43\0\1\u017a\63\0\1\u017b\67\0\1\u017c\65\0"+
    "\1\u017d\105\0\1\u017e\57\0\1\u017f\7\0\1\u0180\51\0"+
    "\1\u0181\63\0\1\u0182\72\0\1\u0183\110\0\1\u0184\53\0"+
    "\1\u0185\62\0\1\u0186\76\0\1\u0187\63\0\1\u0188\115\0"+
    "\1\u0189\50\0\1\u018a\133\0\1\u018b\42\0\1\u018c\70\0"+
    "\1\u018d\47\0\1\u018e\137\0\1\u018f\21\0\1\u0190\105\0"+
    "\1\u0191\102\0\1\u0192\11\0\1\u0193\52\0\1\u0194\54\0"+
    "\1\u0195\131\0\1\u0196\27\0\1\u0197\60\0\1\u0198\63\0"+
    "\1\u0199\130\0\2\u019a\4\0\2\u019b\24\0\1\u019c\23\0"+
    "\1\u019c\44\0\1\u019d\23\0\1\u019d\101\0\2\u019e\27\0"+
    "\1\u019f\4\0\1\u019f\63\0\1\u01a0\4\0\1\u01a0\66\0"+
    "\1\u01a1\23\0\1\u01a1\41\0\1\u01a2\73\0\1\u01a3\23\0"+
    "\1\u01a3\50\0\1\u01a4\23\0\1\u01a4\32\0\1\u01a5\30\0"+
    "\1\u01a5\51\0\1\u01a6\23\0\1\u01a6\103\0\2\u01a7\35\0"+
    "\2\u01a8\62\0\1\u01a9\23\0\1\u01a9\32\0\1\u01aa\30\0"+
    "\1\u01aa\45\0\1\u01ab\23\0\1\u01ab\44\0\1\u01ac\23\0"+
    "\1\u01ac\113\0\2\u01ad\15\0\1\u01ae\4\0\1\u01ae\56\0"+
    "\1\u01af\70\0\1\u01b0\104\0\1\u01b1\23\0\1\u01b1\30\0"+
    "\1\u01b2\106\0\2\u01b3\27\0\2\u01b4\47\0\2\u01b5\45\0"+
    "\1\u01b6\4\0\1\u01b6\56\0\1\u01b7\151\0\1\u01b8\11\0"+
    "\1\u01b9\11\0\1\u01ba\16\0\1\u01b9\4\0\1\u01ba\57\0"+
    "\2\u01bb\47\0\1\u01bc\27\0\1\u01bc\36\0\1\u01bd\4\0"+
    "\1\u01bd\56\0\1\u01be\70\0\1\u01bf\133\0\2\u01c0\24\0"+
    "\1\u01c1\15\0\2\u01c2\51\0\1\u01c3\113\0\2\u01c4\47\0"+
    "\1\u01c5\22\0\1\u01c5\47\0\1\u01c6\4\0\1\u01c6\77\0"+
    "\2\u01c7\56\0\1\u01c8\23\0\1\u01c8\52\0\2\u01c9\51\0"+
    "\1\u01ca\103\0\1\u01cb\16\0\1\u01cb\57\0\2\u01cc\46\0"+
    "\1\u01cd\70\0\1\u01ce\77\0\1\u01cf\27\0\1\u01cf\65\0"+
    "\1\u01d0\10\0\1\u01d0\46\0\2\u01d1\44\0\1\u01d2\26\0"+
    "\2\u01d3\4\0\2\u01d4\34\0\1\u01d5\30\0\1\u01d5\53\0"+
    "\2\u01d6\60\0\1\u01d7\27\0\1\u01d7\41\0\1\u01d8\23\0"+
    "\1\u01d8\57\0\2\u01d9\47\0\1\u01da\22\0\1\u01da\44\0"+
    "\1\u01db\30\0\1\u01db\40\0\1\u01dc\22\0\1\u01dc\42\0"+
    "\1\u01dd\125\0\2\u01de\37\0\1\u01df\4\0\1\u01df\123\0"+
    "\2\u01e0\57\0\2\u01e1\16\0\2\u01e2\55\0\2\u01e3\31\0"+
    "\1\u01e4\21\0\1\u01e5\57\0\2\u01e6\57\0\1\u01e7\7\0"+
    "\2\u01e8\11\0\1\u01e7\60\0\2\u01e9\62\0\1\u01ea\23\0"+
    "\1\u01ea\51\0\2\u01eb\61\0\1\u01ec\16\0\1\u01ec\51\0"+
    "\1\u01ec\5\0\2\u01e9\7\0\1\u01ec\61\0\2\u01ed\44\0"+
    "\1\u01ee\77\0\1\u01ef\27\0\1\u01ef\47\0\2\u01f0\116\0"+
    "\2\u01f1\31\0\1\u01f2\25\0\2\u01f3\1\u01f2\104\0\2\u01f4"+
    "\32\0\2\u01f5\67\0\2\u01f6\7\0\2\u01f7\61\0\2\u01f8"+
    "\56\0\1\u01f9\23\0\1\u01f9\36\0\1\u01fa\30\0\1\u01fa"+
    "\53\0\2\u01fb\54\0\1\u01fc\22\0\1\u01fc\56\0\1\u01fd"+
    "\23\0\1\u01fd\51\0\2\u01fe\64\0\2\u01ff\57\0\1\u0200"+
    "\22\0\1\u0200\43\0\1\u0201\20\0\1\u0201\53\0\1\u0202"+
    "\23\0\1\u0202\41\0\1\u0203\4\0\1\u0203\62\0\1\u0204"+
    "\20\0\1\u0204\61\0\2\u0205\56\0\1\u0206\4\0\1\u0206"+
    "\77\0\1\u0207\110\0\1\u0208\102\0\2\u0209\30\0\1\u020a"+
    "\23\0\1\u020a\33\0\1\u020b\22\0\1\u020b\24\0\2\u020c"+
    "\43\0\2\u020d\50\0\1\u020e\23\0\1\u020e\50\0\1\u020f"+
    "\23\0\1\u020f\37\0\1\u0210\27\0\1\u0210\72\0\2\u0211"+
    "\55\0\2\u0212\61\0\2\u0213\61\0\1\u0214\16\0\1\u0214"+
    "\43\0\1\u0215\4\0\1\u0215\71\0\1\u0216\16\0\1\u0216"+
    "\52\0\1\u0217\23\0\1\u0217\116\0\1\u0218\64\0\1\u0219"+
    "\17\0\1\u021a\104\0\1\u021b\125\0\1\u021c\70\0\1\u021d"+
    "\42\0\1\u021e\70\0\1\u021f\62\0\1\u0220\116\0\1\u0221"+
    "\76\0\1\u0222\45\0\1\u0223\22\0\1\u0224\71\0\1\u0225"+
    "\70\0\1\u0226\70\0\1\u0227\65\0\1\u0228\40\0\1\u0229"+
    "\66\0\1\u022a\110\0\1\u022b\56\0\1\u022c\50\0\1\u022d"+
    "\134\0\1\u022e\27\0\1\u022f\73\0\1\u0230\65\0\1\u0231"+
    "\110\0\1\u0232\22\0\1\u0233\41\0\1\u0234\71\0\1\u0235"+
    "\72\0\1\u0236\1\u0237\113\0\1\u0238\42\0\1\u0239\56\0"+
    "\1\u023a\70\0\1\u023b\77\0\1\u023c\73\0\1\u023d\46\0"+
    "\1\u023e\141\0\1\u023f\32\0\1\u0240\125\0\1\u0241\45\0"+
    "\1\u0242\114\0\1\u0243\27\0\1\u0244\126\0\1\u0245\44\0"+
    "\1\u0246\102\0\1\u0247\76\0\1\u0248\41\0\1\u0249\41\0"+
    "\65\u0196\1\u024a\3\u0196\41\0\1\u024b\42\0\1\u024c\65\0"+
    "\1\u024d\100\0\2\u024e\54\0\1\u024f\22\0\1\u024f\46\0"+
    "\1\u0250\20\0\1\u0250\61\0\2\u0251\61\0\1\u0252\23\0"+
    "\1\u0252\107\0\2\u0253\35\0\2\u0254\67\0\2\u0255\56\0"+
    "\1\u0256\23\0\1\u0256\42\0\1\u0257\22\0\1\u0257\47\0"+
    "\1\u0258\23\0\1\u0258\63\0\2\u0259\53\0\1\u025a\16\0"+
    "\1\u025a\65\0\2\u025b\54\0\1\u025c\23\0\1\u025c\103\0"+
    "\2\u025d\14\0\1\u025e\70\0\1\u025f\70\0\1\u0260\70\0"+
    "\1\u0261\135\0\2\u0262\4\0\2\u0263\24\0\1\u0264\23\0"+
    "\1\u0264\44\0\1\u0265\23\0\1\u0265\34\0\1\u0266\44\0"+
    "\2\u0267\27\0\1\u0268\4\0\1\u0268\63\0\1\u0269\4\0"+
    "\1\u0269\66\0\1\u026a\23\0\1\u026a\41\0\1\u026b\73\0"+
    "\1\u026c\23\0\1\u026c\50\0\1\u026d\23\0\1\u026d\32\0"+
    "\1\u026e\30\0\1\u026e\51\0\1\u026f\23\0\1\u026f\103\0"+
    "\2\u0270\14\0\1\u0271\111\0\2\u0272\62\0\1\u0273\23\0"+
    "\1\u0273\32\0\1\u0274\30\0\1\u0274\35\0\1\u0275\100\0"+
    "\1\u0276\23\0\1\u0276\44\0\1\u0277\23\0\1\u0277\113\0"+
    "\2\u0278\15\0\1\u0279\4\0\1\u0279\74\0\2\u027a\54\0"+
    "\1\u027b\22\0\1\u027b\56\0\1\u027c\23\0\1\u027c\51\0"+
    "\2\u027d\64\0\2\u027e\51\0\1\u027f\76\0\1\u0280\22\0"+
    "\1\u0280\43\0\1\u0281\20\0\1\u0281\53\0\1\u0282\23\0"+
    "\1\u0282\41\0\1\u0283\4\0\1\u0283\56\0\1\u0284\74\0"+
    "\1\u0285\20\0\1\u0285\61\0\2\u0286\56\0\1\u0287\4\0"+
    "\1\u0287\77\0\1\u0288\110\0\1\u0289\102\0\2\u028a\30\0"+
    "\1\u028b\23\0\1\u028b\33\0\1\u028c\22\0\1\u028c\24\0"+
    "\2\u028d\43\0\2\u028e\50\0\1\u028f\23\0\1\u028f\50\0"+
    "\1\u0290\23\0\1\u0290\37\0\1\u0291\27\0\1\u0291\31\0"+
    "\1\u0292\70\0\1\u0293\70\0\1\u0294\70\0\1\u0295\131\0"+
    "\2\u0296\26\0\1\u0297\117\0\2\u0298\61\0\2\u0299\61\0"+
    "\1\u029a\16\0\1\u029a\43\0\1\u029b\4\0\1\u029b\71\0"+
    "\1\u029c\16\0\1\u029c\52\0\1\u029d\23\0\1\u029d\30\0"+
    "\1\u029e\100\0\1\u029f\23\0\1\u029f\63\0\2\u02a0\50\0"+
    "\1\u02a1\23\0\1\u02a1\113\0\2\u02a2\65\0\2\u02a3\15\0"+
    "\1\u02a4\22\0\1\u02a4\60\0\2\u02a5\72\0\2\u02a6\121\0"+
    "\2\u02a7\23\0\1\u02a8\27\0\1\u02a8\41\0\1\u02a9\23\0"+
    "\1\u02a9\63\0\2\u02aa\117\0\2\u02ab\14\0\1\u02ac\20\0"+
    "\1\u02ac\57\0\1\u02ad\23\0\1\u02ad\35\0\1\u02ae\4\0"+
    "\1\u02ae\60\0\1\u02af\30\0\1\u02af\50\0\1\u02b0\16\0"+
    "\1\u02b0\46\0\1\u02b1\23\0\1\u02b1\36\0\1\u02b2\30\0"+
    "\1\u02b2\71\0\1\u02b3\117\0\1\u02b4\17\0\1\u02b5\112\0"+
    "\1\u02b6\117\0\1\u02b7\70\0\1\u02b8\67\0\1\u02b9\36\0"+
    "\1\u02ba\73\0\1\u02bb\74\0\1\u02bc\114\0\1\u02bd\27\0"+
    "\1\u02be\131\0\1\u02bf\3\0\65\u0225\1\u02c0\3\u0225\65\u0226"+
    "\1\u02c1\3\u0226\65\u0227\1\u02c2\3\u0227\64\0\1\u02c3\70\0"+
    "\1\u02c4\36\0\1\u02c5\57\0\1\u02c6\70\0\1\u02c7\77\0"+
    "\1\u02c8\76\0\1\u02c9\116\0\1\u02ca\33\0\1\u02cb\125\0"+
    "\1\u02cc\30\0\1\u02cd\131\0\1\u02ce\43\0\1\u02cf\62\0"+
    "\1\u02d0\77\0\1\u02d1\53\0\1\u02d2\131\0\1\u02d3\63\0"+
    "\1\u02d4\45\0\1\u02d5\74\0\1\u02d6\70\0\1\u02d7\113\0"+
    "\1\u02d8\70\0\1\u02d9\4\0\65\u023f\1\u02da\3\u023f\14\0"+
    "\1\u02db\141\0\1\u02dc\17\0\1\u02dd\54\0\65\u0243\1\u02de"+
    "\3\u0243\41\0\1\u02df\113\0\1\u02e0\70\0\1\u02e1\36\0"+
    "\1\u02e2\66\0\1\u02e3\76\0\1\u02e4\116\0\1\u02e5\70\0"+
    "\1\u02e6\15\0\1\u02e7\64\0\1\u02e8\22\0\1\u02e8\71\0"+
    "\2\u02e9\45\0\1\u02ea\4\0\1\u02ea\61\0\1\u02eb\22\0"+
    "\1\u02eb\60\0\2\u02ec\54\0\1\u02ed\22\0\1\u02ed\60\0"+
    "\2\u02ee\53\0\1\u02ef\30\0\1\u02ef\42\0\1\u02f0\4\0"+
    "\1\u02f0\60\0\1\u02f1\30\0\1\u02f1\64\0\2\u02f2\56\0"+
    "\2\u02f3\54\0\1\u02f4\22\0\1\u02f4\46\0\1\u02f5\20\0"+
    "\1\u02f5\43\0\1\u02f6\106\0\2\u02f7\61\0\1\u02f8\23\0"+
    "\1\u02f8\107\0\2\u02f9\14\0\1\u02fa\111\0\2\u02fb\67\0"+
    "\2\u02fc\56\0\1\u02fd\23\0\1\u02fd\42\0\1\u02fe\22\0"+
    "\1\u02fe\47\0\1\u02ff\23\0\1\u02ff\63\0\2\u0300\53\0"+
    "\1\u0301\16\0\1\u0301\36\0\1\u0302\70\0\1\u0303\117\0"+
    "\2\u0304\54\0\1\u0305\23\0\1\u0305\30\0\1\u0306\143\0"+
    "\2\u0307\24\0\1\u0308\23\0\1\u0308\63\0\2\u0309\50\0"+
    "\1\u030a\23\0\1\u030a\34\0\1\u030b\70\0\1\u030c\70\0"+
    "\1\u030d\147\0\2\u030e\10\0\1\u030f\54\0\2\u0310\15\0"+
    "\1\u0311\22\0\1\u0311\60\0\2\u0312\72\0\2\u0313\121\0"+
    "\2\u0314\14\0\1\u0315\70\0\1\u0316\77\0\1\u0317\27\0"+
    "\1\u0317\41\0\1\u0318\23\0\1\u0318\63\0\2\u0319\117\0"+
    "\2\u031a\10\0\1\u031b\74\0\1\u031c\20\0\1\u031c\57\0"+
    "\1\u031d\23\0\1\u031d\30\0\1\u031e\75\0\1\u031f\4\0"+
    "\1\u031f\60\0\1\u0320\30\0\1\u0320\50\0\1\u0321\16\0"+
    "\1\u0321\36\0\1\u0322\70\0\1\u0323\100\0\1\u0324\23\0"+
    "\1\u0324\36\0\1\u0325\30\0\1\u0325\72\0\2\u0326\40\0"+
    "\1\u0327\22\0\1\u0327\44\0\1\u0328\4\0\1\u0328\127\0"+
    "\2\u0329\21\0\1\u032a\22\0\1\u032a\71\0\2\u032b\113\0"+
    "\2\u032c\27\0\1\u032d\16\0\1\u032d\40\0\1\u032e\30\0"+
    "\1\u032e\42\0\1\u032f\4\0\1\u032f\123\0\2\u0330\32\0"+
    "\1\u0331\23\0\1\u0331\41\0\1\u0332\4\0\1\u0332\66\0"+
    "\1\u0333\23\0\1\u0333\44\0\1\u0334\23\0\1\u0334\71\0"+
    "\2\u0335\67\0\2\u0336\104\0\1\u0337\14\0\65\u02b4\1\u0338"+
    "\3\u02b4\64\0\1\u0339\70\0\1\u033a\4\0\65\u02b7\1\u033b"+
    "\3\u02b7\65\u02b8\1\u033c\3\u02b8\65\0\1\u033d\53\0\1\u033e"+
    "\60\0\1\u033f\23\0\1\u0340\22\0\1\u0341\52\0\65\u02bd"+
    "\1\u0342\3\u02bd\32\0\1\u0343\36\0\65\u02bf\1\u0344\3\u02bf"+
    "\65\0\1\u0345\70\0\1\u0346\67\0\1\u0347\34\0\1\u0348"+
    "\124\0\1\u0349\25\0\1\u034a\104\0\1\u034b\120\0\1\u034c"+
    "\17\0\1\u034d\141\0\1\u034e\35\0\1\u034f\36\0\65\u02ce"+
    "\1\u0350\3\u02ce\64\0\1\u0351\20\0\1\u0352\100\0\1\u0353"+
    "\101\0\1\u0354\33\0\65\u02d3\1\u0355\3\u02d3\64\0\1\u0356"+
    "\42\0\1\u0357\116\0\1\u0358\42\0\1\u0359\117\0\1\u035a"+
    "\70\0\1\u035b\41\0\1\u035c\32\0\65\u02dc\1\u035d\3\u02dc"+
    "\64\0\1\u035e\70\0\1\u035f\71\0\1\u0360\70\0\1\u0361"+
    "\67\0\1\u0362\36\0\1\u0363\122\0\1\u0364\71\0\1\u0365"+
    "\70\0\1\u0366\15\0\1\u0367\121\0\2\u0368\67\0\2\u0369"+
    "\55\0\2\u036a\50\0\1\u036b\23\0\1\u036b\44\0\1\u036c"+
    "\23\0\1\u036c\101\0\2\u036d\25\0\1\u036e\22\0\1\u036e"+
    "\71\0\2\u036f\45\0\1\u0370\4\0\1\u0370\61\0\1\u0371"+
    "\22\0\1\u0371\60\0\2\u0372\54\0\1\u0373\22\0\1\u0373"+
    "\60\0\2\u0374\53\0\1\u0375\30\0\1\u0375\35\0\1\u0376"+
    "\70\0\1\u0377\70\0\1\u0378\75\0\1\u0379\4\0\1\u0379"+
    "\56\0\1\u037a\72\0\1\u037b\30\0\1\u037b\35\0\1\u037c"+
    "\117\0\2\u037d\75\0\2\u037e\40\0\1\u037f\22\0\1\u037f"+
    "\44\0\1\u0380\4\0\1\u0380\127\0\2\u0381\21\0\1\u0382"+
    "\22\0\1\u0382\71\0\2\u0383\113\0\2\u0384\27\0\1\u0385"+
    "\16\0\1\u0385\40\0\1\u0386\30\0\1\u0386\42\0\1\u0387"+
    "\4\0\1\u0387\56\0\1\u0388\135\0\2\u0389\32\0\1\u038a"+
    "\23\0\1\u038a\41\0\1\u038b\4\0\1\u038b\56\0\1\u038c"+
    "\70\0\1\u038d\100\0\1\u038e\23\0\1\u038e\44\0\1\u038f"+
    "\23\0\1\u038f\34\0\1\u0390\34\0\2\u0391\67\0\2\u0392"+
    "\67\0\2\u0393\45\0\1\u0394\16\0\1\u0394\77\0\2\u0395"+
    "\55\0\2\u0396\47\0\1\u0397\27\0\1\u0397\41\0\1\u0398"+
    "\23\0\1\u0398\77\0\2\u0399\34\0\1\u039a\23\0\1\u039a"+
    "\44\0\1\u039b\23\0\1\u039b\76\0\1\u039c\111\0\1\u039d"+
    "\70\0\1\u039e\3\0\65\u033d\1\u039f\3\u033d\14\0\1\u03a0"+
    "\140\0\1\u03a1\71\0\1\u03a2\41\0\1\u03a3\116\0\1\u03a4"+
    "\4\0\65\u0345\1\u03a5\3\u0345\65\u0346\1\u03a6\3\u0346\65\0"+
    "\1\u03a7\47\0\1\u03a8\111\0\1\u03a9\67\0\1\u03aa\70\0"+
    "\1\u03ab\4\0\65\u034c\1\u03ac\3\u034c\64\0\1\u03ad\4\0"+
    "\65\u034e\1\u03ae\3\u034e\64\0\1\u03af\71\0\1\u03b0\67\0"+
    "\1\u03b1\33\0\1\u03b2\76\0\1\u03b3\120\0\1\u03b4\70\0"+
    "\1\u03b5\67\0\1\u03b6\4\0\65\u035a\1\u03b7\3\u035a\65\u035b"+
    "\1\u03b8\3\u035b\35\0\1\u03b9\120\0\1\u03ba\70\0\1\u03bb"+
    "\3\0\65\u0360\1\u03bc\3\u0360\65\u0361\1\u03bd\3\u0361\65\0"+
    "\1\u03be\67\0\1\u03bf\71\0\1\u03c0\3\0\65\u0365\1\u03c1"+
    "\3\u0365\65\u0366\1\u03c2\3\u0366\13\0\1\u03c3\66\0\1\u03c4"+
    "\27\0\1\u03c4\40\0\1\u03c5\27\0\1\u03c5\52\0\2\u03c6"+
    "\111\0\2\u03c7\65\0\2\u03c8\26\0\1\u03c9\70\0\1\u03ca"+
    "\131\0\2\u03cb\26\0\1\u03cc\117\0\2\u03cd\50\0\1\u03ce"+
    "\23\0\1\u03ce\34\0\1\u03cf\100\0\1\u03d0\23\0\1\u03d0"+
    "\34\0\1\u03d1\135\0\2\u03d2\57\0\2\u03d3\45\0\1\u03d4"+
    "\16\0\1\u03d4\36\0\1\u03d5\131\0\2\u03d6\55\0\2\u03d7"+
    "\40\0\1\u03d8\77\0\1\u03d9\27\0\1\u03d9\41\0\1\u03da"+
    "\23\0\1\u03da\34\0\1\u03db\70\0\1\u03dc\70\0\1\u03dd"+
    "\70\0\1\u03de\70\0\1\u03df\133\0\2\u03e0\24\0\1\u03e1"+
    "\100\0\1\u03e2\23\0\1\u03e2\44\0\1\u03e3\23\0\1\u03e3"+
    "\37\0\1\u03e4\22\0\1\u03e4\47\0\1\u03e5\4\0\1\u03e5"+
    "\63\0\1\u03e6\4\0\1\u03e6\113\0\2\u03e7\37\0\1\u03e8"+
    "\4\0\1\u03e8\63\0\1\u03e9\4\0\1\u03e9\132\0\1\u03ea"+
    "\12\0\65\u039d\1\u03eb\3\u039d\65\u039e\1\u03ec\3\u039e\13\0"+
    "\1\u03ed\142\0\1\u03ee\3\0\65\u03a2\1\u03ef\3\u03a2\64\0"+
    "\1\u03f0\71\0\1\u03f1\3\0\65\u03a7\1\u03f2\3\u03a7\32\0"+
    "\1\u03f3\36\0\65\u03a9\1\u03f4\3\u03a9\65\0\1\u03f5\70\0"+
    "\1\u03f6\70\0\1\u03f7\70\0\1\u03f8\3\0\65\u03b0\1\u03f9"+
    "\3\u03b0\65\0\1\u03fa\61\0\1\u03fb\70\0\1\u03fc\12\0"+
    "\65\u03b4\1\u03fd\3\u03b4\65\u03b5\1\u03fe\3\u03b5\65\0\1\u03ff"+
    "\67\0\1\u0400\4\0\65\u03ba\1\u0401\3\u03ba\65\u03bb\1\u0402"+
    "\3\u03bb\65\u03be\1\u0403\3\u03be\65\0\1\u0404\3\0\65\u03c0"+
    "\1\u0405\3\u03c0\14\0\1\u0406\63\0\1\u0407\4\0\1\u0407"+
    "\65\0\1\u0408\27\0\1\u0408\40\0\1\u0409\27\0\1\u0409"+
    "\31\0\1\u040a\111\0\2\u040b\111\0\2\u040c\24\0\1\u040d"+
    "\70\0\1\u040e\70\0\1\u040f\73\0\1\u0410\22\0\1\u0410"+
    "\47\0\1\u0411\4\0\1\u0411\63\0\1\u0412\4\0\1\u0412"+
    "\113\0\2\u0413\32\0\1\u0414\75\0\1\u0415\4\0\1\u0415"+
    "\63\0\1\u0416\4\0\1\u0416\63\0\1\u0417\4\0\1\u0417"+
    "\126\0\1\u0418\102\0\1\u0419\4\0\65\u03ee\1\u041a\3\u03ee"+
    "\65\0\1\u041b\3\0\65\u03f1\1\u041c\3\u03f1\35\0\1\u041d"+
    "\33\0\65\u03f5\1\u041e\3\u03f5\65\u03f6\1\u041f\3\u03f6\65\u03f7"+
    "\1\u0420\3\u03f7\65\u03f8\1\u0421\3\u03f8\65\u03fa\1\u0422\3\u03fa"+
    "\32\0\1\u0423\70\0\1\u0424\36\0\65\u03ff\1\u0425\3\u03ff"+
    "\65\0\1\u0426\3\0\65\u0404\1\u0427\3\u0404\15\0\1\u0428"+
    "\55\0\1\u0429\70\0\1\u042a\70\0\1\u042b\75\0\1\u042c"+
    "\4\0\1\u042c\63\0\1\u042d\4\0\1\u042d\56\0\1\u042e"+
    "\70\0\1\u042f\70\0\1\u0430\70\0\1\u0431\70\0\1\u0432"+
    "\100\0\1\u0433\23\0\1\u0433\116\0\1\u0434\71\0\1\u0435"+
    "\3\0\65\u041b\1\u0436\3\u041b\64\0\1\u0437\54\0\1\u0438"+
    "\70\0\1\u0439\20\0\65\u0426\1\u043a\3\u0426\16\0\1\u043b"+
    "\54\0\1\u043c\100\0\1\u043d\23\0\1\u043d\117\0\1\u043e"+
    "\3\0\65\u0435\1\u043f\3\u0435\65\0\1\u0440\67\0\1\u0441"+
    "\70\0\1\u0442\6\0\1\u0443\70\0\1\u0444\66\0\65\u043e"+
    "\1\u0445\3\u043e\65\u0440\1\u0446\3\u0440\65\0\1\u0447\70\0"+
    "\1\u0448\3\0\65\u0447\1\u0449\3\u0447\65\u0448\1\u044a\3\u0448";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50046];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\4\0\1\1\5\0\2\1\3\0"+
    "\2\1\2\0\1\11\1\1\52\0\1\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\5\0\2\11\1\0\1\1"+
    "\1\11\6\0\1\11\2\0\2\11\3\0\1\1\35\0"+
    "\1\11\16\0\1\11\72\0\4\11\3\0\1\1\11\0"+
    "\1\11\3\0\1\11\31\0\1\11\14\0\1\11\5\0"+
    "\1\11\12\0\1\11\10\0\1\11\3\0\2\11\15\0"+
    "\1\11\4\0\1\11\14\0\4\11\1\0\1\11\6\0"+
    "\1\11\66\0\1\11\3\0\1\11\7\0\2\11\2\0"+
    "\1\11\1\0\2\11\1\0\1\11\4\0\1\11\6\0"+
    "\2\11\1\0\1\11\1\0\1\11\6\0\1\11\2\0"+
    "\2\11\3\0\1\11\12\0\1\11\20\0\1\11\17\0"+
    "\3\11\1\0\1\1\4\0\2\11\4\0\1\11\2\0"+
    "\1\11\3\0\2\11\64\0\1\11\13\0\3\11\1\0"+
    "\1\11\1\0\1\11\1\0\4\11\4\0\1\11\12\0"+
    "\1\11\3\0\1\11\11\0\1\11\4\0\1\11\15\0"+
    "\4\11\1\0\1\11\6\0\1\11\12\0\1\11\3\0"+
    "\2\11\2\0\1\1\16\0\3\11\27\0\1\11\3\0"+
    "\1\11\12\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\4\0\1\11\3\0\1\11\7\0\2\11\2\0"+
    "\1\11\4\0\3\11\1\0\1\11\5\0\2\11\4\0"+
    "\1\11\2\0\1\11\3\0\2\11\4\0\1\11\2\0"+
    "\1\11\2\0\5\11\1\0\1\11\3\0\1\11\2\0"+
    "\2\11\5\0\1\11\1\0\1\11\13\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11\14\0\1\11\2\0"+
    "\1\11\10\0\3\11\1\0\1\11\1\0\1\11\13\0"+
    "\1\11\3\0\2\11\2\0\1\11\2\0\2\11\4\0"+
    "\1\11\5\0\1\11\5\0\2\11\5\0\1\11\1\0"+
    "\1\11\10\0\2\11\3\0\2\11\3\0\2\11\1\0"+
    "\3\11\2\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\3\0\1\11\2\0\1\11\2\0\5\11\1\0"+
    "\1\11\3\0\5\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\4\0\1\11\3\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\3\11\4\0\1\11\5\0\1\11\1\0\1\11\1\0"+
    "\5\11\2\0\1\11\1\0\1\11\1\0\3\11\2\0"+
    "\6\11\2\0\1\11\3\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\4\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1098];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return symbol(sym.DlClose);
          }
        case 236: break;
        case 16: 
          { return symbol(sym.TdOpen);
          }
        case 237: break;
        case 181: 
          { return symbol(sym.StrongClose);
          }
        case 238: break;
        case 7: 
          { return symbol(sym.BOpen);
          }
        case 239: break;
        case 137: 
          { return symbol(sym.TextAttr);
          }
        case 240: break;
        case 234: 
          { return symbol(sym.CellspacingAttr);
          }
        case 241: break;
        case 14: 
          { return symbol(sym.DlOpen);
          }
        case 242: break;
        case 71: 
          { return symbol(sym.MetaOpen);
          }
        case 243: break;
        case 225: 
          { return symbol(sym.BlockquoteOpen);
          }
        case 244: break;
        case 134: 
          { return symbol(sym.IframeOpen);
          }
        case 245: break;
        case 82: 
          { return symbol(sym.LabelOpen);
          }
        case 246: break;
        case 62: 
          { return symbol(sym.HrClose);
          }
        case 247: break;
        case 120: 
          { return symbol(sym.BaseClose);
          }
        case 248: break;
        case 68: 
          { return symbol(sym.AbbrOpen);
          }
        case 249: break;
        case 158: 
          { return symbol(sym.TitleAttr);
          }
        case 250: break;
        case 105: 
          { return symbol(sym.SrcAttr);
          }
        case 251: break;
        case 21: 
          { return symbol(sym.HrOpen);
          }
        case 252: break;
        case 151: 
          { return symbol(sym.StyleClose);
          }
        case 253: break;
        case 6: 
          { return symbol(sym.AOpen);
          }
        case 254: break;
        case 85: 
          { return symbol(sym.DivClose);
          }
        case 255: break;
        case 195: 
          { return symbol(sym.CoordsAttr);
          }
        case 256: break;
        case 184: 
          { return symbol(sym.IframeClose);
          }
        case 257: break;
        case 47: 
          { return symbol(sym.KbdOpen);
          }
        case 258: break;
        case 213: 
          { return symbol(sym.ColspanAttr);
          }
        case 259: break;
        case 199: 
          { return symbol(sym.UsemapAttr);
          }
        case 260: break;
        case 65: 
          { return symbol(sym.BrClose);
          }
        case 261: break;
        case 221: 
          { return symbol(sym.NoscriptClose);
          }
        case 262: break;
        case 142: 
          { return symbol(sym.NoshadeAttr);
          }
        case 263: break;
        case 141: 
          { return symbol(sym.NameAttr);
          }
        case 264: break;
        case 44: 
          { return symbol(sym.VarOpen);
          }
        case 265: break;
        case 170: 
          { return symbol(sym.ColgroupOpen);
          }
        case 266: break;
        case 50: 
          { return symbol(sym.HtmlOpen);
          }
        case 267: break;
        case 25: 
          { return symbol(sym.UlOpen);
          }
        case 268: break;
        case 94: 
          { return symbol(sym.VarClose);
          }
        case 269: break;
        case 208: 
          { return symbol(sym.MethodsAttr);
          }
        case 270: break;
        case 187: 
          { return symbol(sym.NoframesOpen);
          }
        case 271: break;
        case 192: 
          { return symbol(sym.MethodAttr);
          }
        case 272: break;
        case 97: 
          { return symbol(sym.KbdClose);
          }
        case 273: break;
        case 88: 
          { return symbol(sym.PreClose);
          }
        case 274: break;
        case 132: 
          { return symbol(sym.StrikeOpen);
          }
        case 275: break;
        case 233: 
          { return symbol(sym.BackgroundAttr);
          }
        case 276: break;
        case 176: 
          { return symbol(sym.LegendClose);
          }
        case 277: break;
        case 77: 
          { return symbol(sym.IdAttr);
          }
        case 278: break;
        case 143: 
          { return symbol(sym.SizeAttr);
          }
        case 279: break;
        case 180: 
          { return symbol(sym.ScriptClose);
          }
        case 280: break;
        case 12: 
          { return symbol(sym.DdOpen);
          }
        case 281: break;
        case 231: 
          { return symbol(sym.BlockquoteClose);
          }
        case 282: break;
        case 148: 
          { return symbol(sym.TitleClose);
          }
        case 283: break;
        case 172: 
          { return symbol(sym.OptionClose);
          }
        case 284: break;
        case 22: 
          { return symbol(sym.HnOpen);
          }
        case 285: break;
        case 52: 
          { return symbol(sym.LinkOpen);
          }
        case 286: break;
        case 90: 
          { return symbol(sym.BdoClose);
          }
        case 287: break;
        case 73: 
          { return symbol(sym.SpanOpen);
          }
        case 288: break;
        case 32: 
          { return symbol(sym.MapOpen);
          }
        case 289: break;
        case 189: 
          { return symbol(sym.FieldsetOpen);
          }
        case 290: break;
        case 98: 
          { return symbol(sym.StyleOpen);
          }
        case 291: break;
        case 38: 
          { return symbol(sym.QClose);
          }
        case 292: break;
        case 128: 
          { return symbol(sym.ButtonOpen);
          }
        case 293: break;
        case 41: 
          { return symbol(sym.BigOpen);
          }
        case 294: break;
        case 127: 
          { return symbol(sym.AppletOpen);
          }
        case 295: break;
        case 70: 
          { return symbol(sym.BaseOpen);
          }
        case 296: break;
        case 153: 
          { return symbol(sym.InputClose);
          }
        case 297: break;
        case 49: 
          { return symbol(sym.CiteOpen);
          }
        case 298: break;
        case 133: 
          { return symbol(sym.SelectOpen);
          }
        case 299: break;
        case 30: 
          { return symbol(sym.ColOpen);
          }
        case 300: break;
        case 3: 
          { return symbol(sym.EndTag);
          }
        case 301: break;
        case 24: 
          { return symbol(sym.BrOpen);
          }
        case 302: break;
        case 110: 
          { return symbol(sym.TheadOpen);
          }
        case 303: break;
        case 100: 
          { return symbol(sym.InputOpen);
          }
        case 304: break;
        case 81: 
          { return symbol(sym.ParamOpen);
          }
        case 305: break;
        case 108: 
          { return symbol(sym.ObjectOpen);
          }
        case 306: break;
        case 96: 
          { return symbol(sym.InsClose);
          }
        case 307: break;
        case 113: 
          { return symbol(sym.CiteClose);
          }
        case 308: break;
        case 222: 
          { return symbol(sym.NoframesClose);
          }
        case 309: break;
        case 216: 
          { return symbol(sym.VersionAttr);
          }
        case 310: break;
        case 190: 
          { return symbol(sym.HeightAttr);
          }
        case 311: break;
        case 178: 
          { return symbol(sym.ButtonClose);
          }
        case 312: break;
        case 152: 
          { return symbol(sym.SmallClose);
          }
        case 313: break;
        case 20: 
          { return symbol(sym.EmOpen);
          }
        case 314: break;
        case 196: 
          { return symbol(sym.NohrefAttr);
          }
        case 315: break;
        case 145: 
          { return symbol(sym.ListingOpen);
          }
        case 316: break;
        case 15: 
          { return symbol(sym.OlOpen);
          }
        case 317: break;
        case 200: 
          { return symbol(sym.ValignAttr);
          }
        case 318: break;
        case 210: 
          { return symbol(sym.BgcolorAttr);
          }
        case 319: break;
        case 193: 
          { return symbol(sym.ActionAttr);
          }
        case 320: break;
        case 173: 
          { return symbol(sym.ObjectClose);
          }
        case 321: break;
        case 54: 
          { return symbol(sym.DtClose);
          }
        case 322: break;
        case 164: 
          { return symbol(sym.StartAttr);
          }
        case 323: break;
        case 165: 
          { return symbol(sym.VlinkAttr);
          }
        case 324: break;
        case 215: 
          { return symbol(sym.EnctypeAttr);
          }
        case 325: break;
        case 167: 
          { return symbol(sym.IsmapAttr);
          }
        case 326: break;
        case 43: 
          { return symbol(sym.XmpOpen);
          }
        case 327: break;
        case 232: 
          { return symbol(sym.HttpEquivAttr);
          }
        case 328: break;
        case 95: 
          { return symbol(sym.ImgClose);
          }
        case 329: break;
        case 157: 
          { return symbol(sym.IsindexOpen);
          }
        case 330: break;
        case 91: 
          { return symbol(sym.BigClose);
          }
        case 331: break;
        case 162: 
          { return symbol(sym.ColorAttr);
          }
        case 332: break;
        case 76: 
          { return symbol(sym.FontOpen);
          }
        case 333: break;
        case 150: 
          { return symbol(sym.LabelClose);
          }
        case 334: break;
        case 219: 
          { return symbol(sym.TextareaClose);
          }
        case 335: break;
        case 202: 
          { return symbol(sym.PlaintextOpen);
          }
        case 336: break;
        case 79: 
          { return symbol(sym.TbodyOpen);
          }
        case 337: break;
        case 205: 
          { return symbol(sym.AddressClose);
          }
        case 338: break;
        case 198: 
          { return symbol(sym.PromptAttr);
          }
        case 339: break;
        case 168: 
          { return symbol(sym.WidthAttr);
          }
        case 340: break;
        case 48: 
          { return symbol(sym.CodeOpen);
          }
        case 341: break;
        case 144: 
          { return symbol(sym.CaptionOpen);
          }
        case 342: break;
        case 34: 
          { return symbol(sym.AClose);
          }
        case 343: break;
        case 103: 
          { return symbol(sym.RevAttr);
          }
        case 344: break;
        case 197: 
          { return symbol(sym.NowrapAttr);
          }
        case 345: break;
        case 107: 
          { return symbol(sym.OptionOpen);
          }
        case 346: break;
        case 206: 
          { return symbol(sym.AcronymClose);
          }
        case 347: break;
        case 42: 
          { return symbol(sym.SubOpen);
          }
        case 348: break;
        case 37: 
          { return symbol(sym.UClose);
          }
        case 349: break;
        case 121: 
          { return symbol(sym.MetaClose);
          }
        case 350: break;
        case 201: 
          { return symbol(sym.VspaceAttr);
          }
        case 351: break;
        case 106: 
          { return symbol(sym.UrnAttr);
          }
        case 352: break;
        case 235: 
          { return symbol(sym.CellpaddingAttr);
          }
        case 353: break;
        case 212: 
          { return symbol(sym.CompactAttr);
          }
        case 354: break;
        case 209: 
          { return symbol(sym.RowspanAttr);
          }
        case 355: break;
        case 177: 
          { return symbol(sym.AppletClose);
          }
        case 356: break;
        case 92: 
          { return symbol(sym.SubClose);
          }
        case 357: break;
        case 136: 
          { return symbol(sym.TypeAttr);
          }
        case 358: break;
        case 147: 
          { return symbol(sym.TbodyClose);
          }
        case 359: break;
        case 101: 
          { return symbol(sym.FrameOpen);
          }
        case 360: break;
        case 66: 
          { return symbol(sym.UlClose);
          }
        case 361: break;
        case 118: 
          { return symbol(sym.AbbrClose);
          }
        case 362: break;
        case 214: 
          { return symbol(sym.ContentAttr);
          }
        case 363: break;
        case 224: 
          { return symbol(sym.FieldsetClose);
          }
        case 364: break;
        case 28: 
          { return symbol(sym.DivOpen);
          }
        case 365: break;
        case 99: 
          { return symbol(sym.SmallOpen);
          }
        case 366: break;
        case 23: 
          { return symbol(sym.LiOpen);
          }
        case 367: break;
        case 31: 
          { return symbol(sym.PreOpen);
          }
        case 368: break;
        case 53: 
          { return symbol(sym.DdClose);
          }
        case 369: break;
        case 122: 
          { return symbol(sym.MenuClose);
          }
        case 370: break;
        case 166: 
          { return symbol(sym.ValueAttr);
          }
        case 371: break;
        case 129: 
          { return symbol(sym.NextidOpen);
          }
        case 372: break;
        case 56: 
          { return symbol(sym.OlClose);
          }
        case 373: break;
        case 149: 
          { return symbol(sym.ParamClose);
          }
        case 374: break;
        case 114: 
          { return symbol(sym.HtmlClose);
          }
        case 375: break;
        case 67: 
          { return symbol(sym.AreaOpen);
          }
        case 376: break;
        case 9: 
          { return symbol(sym.UOpen);
          }
        case 377: break;
        case 93: 
          { return symbol(sym.XmpClose);
          }
        case 378: break;
        case 161: 
          { return symbol(sym.ClearAttr);
          }
        case 379: break;
        case 89: 
          { return symbol(sym.MapClose);
          }
        case 380: break;
        case 160: 
          { return symbol(sym.AlignAttr);
          }
        case 381: break;
        case 40: 
          { return symbol(sym.BdoOpen);
          }
        case 382: break;
        case 26: 
          { return symbol(sym.DelOpen);
          }
        case 383: break;
        case 188: 
          { return symbol(sym.FramesetOpen);
          }
        case 384: break;
        case 155: 
          { return symbol(sym.AddressOpen);
          }
        case 385: break;
        case 223: 
          { return symbol(sym.FramesetClose);
          }
        case 386: break;
        case 80: 
          { return symbol(sym.TitleOpen);
          }
        case 387: break;
        case 2: 
          { return symbol(sym.LineTerminator);
          }
        case 388: break;
        case 58: 
          { return symbol(sym.TtClose);
          }
        case 389: break;
        case 61: 
          { return symbol(sym.EmClose);
          }
        case 390: break;
        case 8: 
          { return symbol(sym.SOpen);
          }
        case 391: break;
        case 119: 
          { return symbol(sym.BodyClose);
          }
        case 392: break;
        case 27: 
          { return symbol(sym.DirOpen);
          }
        case 393: break;
        case 102: 
          { return symbol(sym.RelAttr);
          }
        case 394: break;
        case 135: 
          { return symbol(sym.HrefAttr);
          }
        case 395: break;
        case 109: 
          { return symbol(sym.CenterOpen);
          }
        case 396: break;
        case 19: 
          { return symbol(sym.TrOpen);
          }
        case 397: break;
        case 45: 
          { return symbol(sym.ImgOpen);
          }
        case 398: break;
        case 5: 
          { return symbol(sym.POpen);
          }
        case 399: break;
        case 64: 
          { return symbol(sym.LiClose);
          }
        case 400: break;
        case 1: 
          { return symbol(sym.ERROR);
          }
        case 401: break;
        case 112: 
          { return symbol(sym.CodeClose);
          }
        case 402: break;
        case 10: 
          { return symbol(sym.QOpen);
          }
        case 403: break;
        case 4: 
          { return symbol(sym.Content);
          }
        case 404: break;
        case 17: 
          { return symbol(sym.TtOpen);
          }
        case 405: break;
        case 123: 
          { return symbol(sym.SpanClose);
          }
        case 406: break;
        case 111: 
          { return symbol(sym.LegendOpen);
          }
        case 407: break;
        case 35: 
          { return symbol(sym.BClose);
          }
        case 408: break;
        case 185: 
          { return symbol(sym.BasefontOpen);
          }
        case 409: break;
        case 126: 
          { return symbol(sym.FontClose);
          }
        case 410: break;
        case 86: 
          { return symbol(sym.DfnClose);
          }
        case 411: break;
        case 226: 
          { return symbol(sym.MultipleAttr);
          }
        case 412: break;
        case 229: 
          { return symbol(sym.MaxlengthAttr);
          }
        case 413: break;
        case 175: 
          { return symbol(sym.TheadClose);
          }
        case 414: break;
        case 174: 
          { return symbol(sym.CenterClose);
          }
        case 415: break;
        case 228: 
          { return symbol(sym.PlaintextClose);
          }
        case 416: break;
        case 154: 
          { return symbol(sym.FrameClose);
          }
        case 417: break;
        case 146: 
          { return symbol(sym.TableClose);
          }
        case 418: break;
        case 194: 
          { return symbol(sym.BorderAttr);
          }
        case 419: break;
        case 115: 
          { return symbol(sym.HeadClose);
          }
        case 420: break;
        case 138: 
          { return symbol(sym.LinkAttr);
          }
        case 421: break;
        case 186: 
          { return symbol(sym.NoscriptOpen);
          }
        case 422: break;
        case 46: 
          { return symbol(sym.InsOpen);
          }
        case 423: break;
        case 75: 
          { return symbol(sym.FormOpen);
          }
        case 424: break;
        case 51: 
          { return symbol(sym.HeadOpen);
          }
        case 425: break;
        case 39: 
          { return symbol(sym.IClose);
          }
        case 426: break;
        case 182: 
          { return symbol(sym.StrikeClose);
          }
        case 427: break;
        case 159: 
          { return symbol(sym.AlinkAttr);
          }
        case 428: break;
        case 124: 
          { return symbol(sym.SampClose);
          }
        case 429: break;
        case 83: 
          { return symbol(sym.DelClose);
          }
        case 430: break;
        case 36: 
          { return symbol(sym.SClose);
          }
        case 431: break;
        case 116: 
          { return symbol(sym.LinkClose);
          }
        case 432: break;
        case 57: 
          { return symbol(sym.TdClose);
          }
        case 433: break;
        case 72: 
          { return symbol(sym.MenuOpen);
          }
        case 434: break;
        case 169: 
          { return symbol(sym.OptgroupOpen);
          }
        case 435: break;
        case 29: 
          { return symbol(sym.DfnOpen);
          }
        case 436: break;
        case 63: 
          { return symbol(sym.HnClose);
          }
        case 437: break;
        case 139: 
          { return symbol(sym.RowsAttr);
          }
        case 438: break;
        case 11: 
          { return symbol(sym.IOpen);
          }
        case 439: break;
        case 217: 
          { return symbol(sym.OptgroupClose);
          }
        case 440: break;
        case 203: 
          { return symbol(sym.CaptionClose);
          }
        case 441: break;
        case 13: 
          { return symbol(sym.DtOpen);
          }
        case 442: break;
        case 220: 
          { return symbol(sym.BasefontClose);
          }
        case 443: break;
        case 69: 
          { return symbol(sym.BodyOpen);
          }
        case 444: break;
        case 131: 
          { return symbol(sym.StrongOpen);
          }
        case 445: break;
        case 156: 
          { return symbol(sym.AcronymOpen);
          }
        case 446: break;
        case 125: 
          { return symbol(sym.FormClose);
          }
        case 447: break;
        case 207: 
          { return symbol(sym.IsindexClose);
          }
        case 448: break;
        case 183: 
          { return symbol(sym.SelectClose);
          }
        case 449: break;
        case 74: 
          { return symbol(sym.SampOpen);
          }
        case 450: break;
        case 227: 
          { return symbol(sym.SelectedAttr);
          }
        case 451: break;
        case 191: 
          { return symbol(sym.HspaceAttr);
          }
        case 452: break;
        case 211: 
          { return symbol(sym.CheckedAttr);
          }
        case 453: break;
        case 163: 
          { return symbol(sym.ShapeAttr);
          }
        case 454: break;
        case 87: 
          { return symbol(sym.ColClose);
          }
        case 455: break;
        case 230: 
          { return symbol(sym.DOCTYPE);
          }
        case 456: break;
        case 204: 
          { return symbol(sym.ListingClose);
          }
        case 457: break;
        case 218: 
          { return symbol(sym.ColgroupClose);
          }
        case 458: break;
        case 59: 
          { return symbol(sym.ThClose);
          }
        case 459: break;
        case 78: 
          { return symbol(sym.TableOpen);
          }
        case 460: break;
        case 33: 
          { return symbol(sym.PClose);
          }
        case 461: break;
        case 84: 
          { return symbol(sym.DirClose);
          }
        case 462: break;
        case 130: 
          { return symbol(sym.ScriptOpen);
          }
        case 463: break;
        case 60: 
          { return symbol(sym.TrClose);
          }
        case 464: break;
        case 18: 
          { return symbol(sym.ThOpen);
          }
        case 465: break;
        case 104: 
          { return symbol(sym.AltAttr);
          }
        case 466: break;
        case 179: 
          { return symbol(sym.NextidClose);
          }
        case 467: break;
        case 117: 
          { return symbol(sym.AreaClose);
          }
        case 468: break;
        case 171: 
          { return symbol(sym.TextareaOpen);
          }
        case 469: break;
        case 140: 
          { return symbol(sym.ColsAttr);
          }
        case 470: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
