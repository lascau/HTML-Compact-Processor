/* The following code was generated by JFlex 1.4.3 on 11/2/20 3:55 PM */

package work;
import static work.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/2/20 3:55 PM from the specification file
 * <tt>C:/Users/Lascau/Desktop/HTML-Compact-Processor/TranslatorDesignProject/src/work/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\71\2\0\1\1\22\0\1\1\1\0\1\65\11\0"+
    "\1\1\1\70\1\0\1\7\12\0\2\0\1\2\1\64\1\10\2\0"+
    "\1\11\1\13\1\15\1\27\1\31\1\57\1\47\1\3\1\55\1\63"+
    "\1\61\1\37\1\25\1\21\1\17\1\35\1\53\1\5\1\33\1\41"+
    "\1\43\1\51\1\0\1\45\1\23\1\0\4\0\1\0\1\0\1\12"+
    "\1\14\1\16\1\30\1\32\1\60\1\50\1\4\1\56\1\63\1\62"+
    "\1\40\1\26\1\22\1\20\1\36\1\54\1\6\1\34\1\42\1\44"+
    "\1\52\1\67\1\46\1\24\1\66\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\1\1\3\16\1\2\0\1\4"+
    "\1\5\7\0\1\6\1\7\2\0\1\10\2\0\1\11"+
    "\1\12\10\0\1\2\42\0\1\13\1\14\50\0\1\15"+
    "\4\0\1\16\1\0\1\17\1\20\2\0\1\21\15\0"+
    "\1\22\1\23\1\24\2\0\1\25\1\0\1\26\1\0"+
    "\1\27\100\0\1\30\4\0\1\31\30\0\1\32\11\0"+
    "\1\33\15\0\1\34\3\0\1\35\1\36\17\0\1\37"+
    "\2\0\1\40\2\0\1\41\7\0\1\42\2\0\1\43"+
    "\1\44\1\45\1\46\7\0\1\47\1\50\13\0\1\51"+
    "\1\52\1\53\1\0\1\54\6\0\1\55\62\0\1\56"+
    "\1\57\1\60\1\61\24\0\1\62\6\0\1\63\1\0"+
    "\1\64\1\65\3\0\1\66\15\0\1\67\3\0\1\70"+
    "\1\71\2\0\1\72\1\0\1\73\1\0\1\74\14\0"+
    "\1\75\1\76\3\0\1\77\1\100\3\0\1\101\2\0"+
    "\1\102\6\0\1\103\1\104\1\105\1\106\12\0\1\107"+
    "\12\0\1\110\1\111\62\0\1\112\13\0\1\113\2\0"+
    "\1\114\2\0\1\115\11\0\1\116\2\0\1\117\1\120"+
    "\1\121\1\122\10\0\1\123\1\124\13\0\1\125\1\126"+
    "\1\127\1\0\1\130\6\0\1\131\20\0\1\132\3\0"+
    "\1\133\1\134\1\0\1\135\3\0\1\136\1\137\1\0"+
    "\1\140\1\141\2\0\1\142\7\0\1\143\1\144\1\0"+
    "\1\145\27\0\1\146\10\0\1\147\10\0\1\150\1\151"+
    "\1\152\1\153\3\0\1\154\1\0\1\155\3\0\1\156"+
    "\2\0\1\157\6\0\1\160\1\161\1\162\1\163\12\0"+
    "\1\164\12\0\1\165\1\166\3\0\1\167\2\0\1\170"+
    "\2\0\1\171\1\172\1\0\1\173\2\0\1\174\1\175"+
    "\1\176\1\177\1\200\1\0\1\201\1\0\1\202\2\0"+
    "\1\203\2\0\1\204\4\0\1\205\17\0\1\206\1\0"+
    "\1\207\11\0\1\210\1\0\1\211\1\212\1\213\31\0"+
    "\1\214\3\0\1\215\1\216\1\0\1\217\3\0\1\220"+
    "\1\221\1\0\1\222\1\223\2\0\1\224\2\0\1\225"+
    "\1\226\2\0\1\227\5\0\1\230\1\0\1\231\7\0"+
    "\1\232\1\233\7\0\1\234\3\0\1\235\7\0\1\236"+
    "\1\0\1\237\1\0\1\240\1\0\1\241\3\0\1\242"+
    "\1\243\1\244\2\0\1\245\2\0\1\246\2\0\1\247"+
    "\1\250\1\0\1\251\2\0\1\252\1\253\1\254\1\255"+
    "\1\256\1\0\1\257\1\0\1\260\2\0\1\261\2\0"+
    "\1\262\1\0\1\263\1\264\1\265\1\266\1\0\1\267"+
    "\1\270\1\271\1\272\1\273\2\0\1\274\1\0\1\275"+
    "\2\0\1\276\5\0\1\277\1\300\2\0\1\301\3\0"+
    "\1\302\1\303\1\304\1\0\1\305\1\306\1\307\2\0"+
    "\1\310\5\0\1\311\1\0\1\312\3\0\1\313\1\0"+
    "\1\314\1\0\1\315\1\316\1\317\1\320\1\321\3\0"+
    "\1\322\1\0\1\323\1\0\1\324\1\325\1\0\1\326"+
    "\1\327\1\330\1\331\1\0\1\332\1\333\1\334\1\335"+
    "\5\0\1\336\1\337\1\0\1\340\4\0\1\341\1\342"+
    "\1\343\1\344\2\0\1\345\1\346";

  private static int [] zzUnpackAction() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\72\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\72\0\72\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\72"+
    "\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\72\0\u1d00\0\72\0\72"+
    "\0\u1d3a\0\u1d74\0\72\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\72\0\u2114\0\u214e\0\72\0\u2188\0\72"+
    "\0\u21c2\0\72\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe"+
    "\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\72\0\u307c\0\u30b6\0\u30f0\0\u312a\0\72"+
    "\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa"+
    "\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\72\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\u386a\0\u38a4\0\72\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\72\0\u3bd0\0\u3c0a\0\u3c44\0\72\0\72\0\u3c7e\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\72\0\u3fe4\0\u401e"+
    "\0\72\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\72\0\u429c\0\u42d6\0\72\0\72"+
    "\0\72\0\72\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432"+
    "\0\u446c\0\72\0\72\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e"+
    "\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\72\0\72"+
    "\0\72\0\u4724\0\72\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846"+
    "\0\u4880\0\72\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc"+
    "\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac"+
    "\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c"+
    "\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec"+
    "\0\u5326\0\u5360\0\u539a\0\u53d4\0\72\0\72\0\72\0\72"+
    "\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4"+
    "\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774"+
    "\0\u57ae\0\u57e8\0\u5822\0\u585c\0\72\0\u5896\0\u58d0\0\u590a"+
    "\0\u5944\0\u597e\0\u59b8\0\72\0\u59f2\0\72\0\72\0\u5a2c"+
    "\0\u5a66\0\u5aa0\0\72\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2"+
    "\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92"+
    "\0\72\0\u5dcc\0\u5e06\0\u5e40\0\72\0\72\0\u5e7a\0\u5eb4"+
    "\0\72\0\u5eee\0\72\0\u5f28\0\72\0\u5f62\0\u5f9c\0\u5fd6"+
    "\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6"+
    "\0\u61e0\0\72\0\72\0\u621a\0\u6254\0\u628e\0\u62c8\0\72"+
    "\0\u6302\0\u633c\0\u6376\0\72\0\u63b0\0\u63ea\0\72\0\u6424"+
    "\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\72\0\72\0\72"+
    "\0\72\0\u6580\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc"+
    "\0\u6716\0\u6750\0\u678a\0\72\0\u67c4\0\u67fe\0\u6838\0\u6872"+
    "\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce\0\72\0\72"+
    "\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e"+
    "\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e"+
    "\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e"+
    "\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e"+
    "\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a\0\u72a4\0\u72de"+
    "\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae"+
    "\0\u74e8\0\u7522\0\72\0\u755c\0\u7596\0\u75d0\0\u760a\0\u7644"+
    "\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u77a0\0\72\0\u77da"+
    "\0\u7814\0\72\0\u784e\0\u7888\0\72\0\u78c2\0\u78fc\0\u7936"+
    "\0\u7970\0\u79aa\0\u79e4\0\u7a1e\0\u7a58\0\u7a92\0\72\0\u7acc"+
    "\0\u7b06\0\72\0\72\0\72\0\72\0\u7b40\0\u7b7a\0\u7bb4"+
    "\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6\0\72\0\72\0\u7d10"+
    "\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0"+
    "\0\u7f1a\0\u7f54\0\72\0\72\0\72\0\u7f8e\0\72\0\u7fc8"+
    "\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea\0\72\0\u8124\0\u815e"+
    "\0\u8198\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u832e"+
    "\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\72\0\u84c4"+
    "\0\u84fe\0\u8538\0\72\0\72\0\u8572\0\72\0\u85ac\0\u85e6"+
    "\0\u8620\0\72\0\72\0\u865a\0\72\0\72\0\u8694\0\u86ce"+
    "\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864\0\u889e"+
    "\0\72\0\72\0\u88d8\0\72\0\u8912\0\u894c\0\u8986\0\u89c0"+
    "\0\u89fa\0\u8a34\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90"+
    "\0\u8bca\0\u8c04\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60"+
    "\0\u8d9a\0\u8dd4\0\u8e0e\0\72\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6"+
    "\0\u8f30\0\u8f6a\0\u8fa4\0\u8fde\0\72\0\u9018\0\u9052\0\u908c"+
    "\0\u90c6\0\u9100\0\u913a\0\u9174\0\u91ae\0\72\0\72\0\72"+
    "\0\72\0\u91e8\0\u9222\0\u925c\0\72\0\u9296\0\72\0\u92d0"+
    "\0\u930a\0\u9344\0\72\0\u937e\0\u93b8\0\72\0\u93f2\0\u942c"+
    "\0\u9466\0\u94a0\0\u94da\0\u9514\0\72\0\72\0\72\0\72"+
    "\0\u954e\0\u9588\0\u95c2\0\u95fc\0\u9636\0\u9670\0\u96aa\0\u96e4"+
    "\0\u971e\0\u9758\0\72\0\u9792\0\u97cc\0\u9806\0\u9840\0\u987a"+
    "\0\u98b4\0\u98ee\0\u9928\0\u9962\0\u999c\0\72\0\72\0\u99d6"+
    "\0\u9a10\0\u9a4a\0\72\0\u9a84\0\u9abe\0\72\0\u9af8\0\u9b32"+
    "\0\72\0\72\0\u9b6c\0\72\0\u9ba6\0\u9be0\0\72\0\72"+
    "\0\72\0\72\0\72\0\u9c1a\0\72\0\u9c54\0\72\0\u9c8e"+
    "\0\u9cc8\0\72\0\u9d02\0\u9d3c\0\72\0\u9d76\0\u9db0\0\u9dea"+
    "\0\u9e24\0\72\0\u9e5e\0\u9e98\0\u9ed2\0\u9f0c\0\u9f46\0\u9f80"+
    "\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\ua0dc\0\ua116\0\ua150"+
    "\0\ua18a\0\72\0\ua1c4\0\72\0\ua1fe\0\ua238\0\ua272\0\ua2ac"+
    "\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce\0\72\0\ua408\0\72"+
    "\0\72\0\72\0\ua442\0\ua47c\0\ua4b6\0\ua4f0\0\ua52a\0\ua564"+
    "\0\ua59e\0\ua5d8\0\ua612\0\ua64c\0\ua686\0\ua6c0\0\ua6fa\0\ua734"+
    "\0\ua76e\0\ua7a8\0\ua7e2\0\ua81c\0\ua856\0\ua890\0\ua8ca\0\ua904"+
    "\0\ua93e\0\ua978\0\ua9b2\0\72\0\ua9ec\0\uaa26\0\uaa60\0\72"+
    "\0\72\0\uaa9a\0\72\0\uaad4\0\uab0e\0\uab48\0\72\0\72"+
    "\0\uab82\0\72\0\72\0\uabbc\0\uabf6\0\72\0\uac30\0\uac6a"+
    "\0\72\0\72\0\uaca4\0\uacde\0\72\0\uad18\0\uad52\0\uad8c"+
    "\0\uadc6\0\uae00\0\72\0\uae3a\0\72\0\uae74\0\uaeae\0\uaee8"+
    "\0\uaf22\0\uaf5c\0\uaf96\0\uafd0\0\72\0\72\0\ub00a\0\ub044"+
    "\0\ub07e\0\ub0b8\0\ub0f2\0\ub12c\0\ub166\0\72\0\ub1a0\0\ub1da"+
    "\0\ub214\0\72\0\ub24e\0\ub288\0\ub2c2\0\ub2fc\0\ub336\0\ub370"+
    "\0\ub3aa\0\72\0\ub3e4\0\72\0\ub41e\0\72\0\ub458\0\72"+
    "\0\ub492\0\ub4cc\0\ub506\0\72\0\72\0\72\0\ub540\0\ub57a"+
    "\0\72\0\ub5b4\0\ub5ee\0\72\0\ub628\0\ub662\0\72\0\72"+
    "\0\ub69c\0\72\0\ub6d6\0\ub710\0\72\0\72\0\72\0\72"+
    "\0\72\0\ub74a\0\72\0\ub784\0\72\0\ub7be\0\ub7f8\0\72"+
    "\0\ub832\0\ub86c\0\72\0\ub8a6\0\72\0\72\0\72\0\72"+
    "\0\ub8e0\0\72\0\72\0\72\0\72\0\72\0\ub91a\0\ub954"+
    "\0\72\0\ub98e\0\72\0\ub9c8\0\uba02\0\72\0\uba3c\0\uba76"+
    "\0\ubab0\0\ubaea\0\ubb24\0\72\0\72\0\ubb5e\0\ubb98\0\72"+
    "\0\ubbd2\0\ubc0c\0\ubc46\0\72\0\72\0\72\0\ubc80\0\72"+
    "\0\72\0\72\0\ubcba\0\ubcf4\0\72\0\ubd2e\0\ubd68\0\ubda2"+
    "\0\ubddc\0\ube16\0\72\0\ube50\0\72\0\ube8a\0\ubec4\0\ubefe"+
    "\0\72\0\ubf38\0\72\0\ubf72\0\72\0\72\0\72\0\72"+
    "\0\72\0\ubfac\0\ubfe6\0\uc020\0\72\0\uc05a\0\72\0\uc094"+
    "\0\72\0\72\0\uc0ce\0\72\0\72\0\72\0\72\0\uc108"+
    "\0\72\0\72\0\72\0\72\0\uc142\0\uc17c\0\uc1b6\0\uc1f0"+
    "\0\uc22a\0\72\0\72\0\uc264\0\72\0\uc29e\0\uc2d8\0\uc312"+
    "\0\uc34c\0\72\0\72\0\72\0\72\0\uc386\0\uc3c0\0\72"+
    "\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\2\1\12\1\2\1\13\3\2"+
    "\1\14\3\2\1\15\3\2\1\16\1\2\1\17\1\2"+
    "\1\20\1\2\1\21\1\2\1\22\1\2\1\23\5\2"+
    "\1\24\3\2\1\25\10\2\1\26\1\2\1\3\73\0"+
    "\1\3\67\0\1\3\3\0\2\27\2\0\1\30\1\0"+
    "\2\31\2\32\2\33\2\34\2\35\2\0\1\36\1\37"+
    "\2\40\2\41\2\42\2\43\2\44\2\45\2\46\2\47"+
    "\2\0\2\50\2\51\2\52\2\53\2\54\15\0\1\55"+
    "\23\0\1\56\1\0\1\57\5\0\1\60\47\0\1\61"+
    "\11\0\1\62\46\0\1\63\62\0\2\10\1\0\67\10"+
    "\16\0\1\64\21\0\1\65\43\0\1\66\5\0\1\67"+
    "\27\0\1\70\25\0\1\71\13\0\1\72\11\0\1\73"+
    "\5\0\1\74\43\0\1\75\5\0\1\76\63\0\1\77"+
    "\17\0\1\100\11\0\1\101\47\0\1\102\53\0\1\103"+
    "\1\0\1\104\23\0\1\105\7\0\1\106\13\0\1\107"+
    "\21\0\1\110\141\0\1\111\37\0\1\112\5\0\1\113"+
    "\23\0\1\114\21\0\1\115\25\0\1\116\47\0\1\117"+
    "\17\0\1\120\1\0\1\121\3\0\1\122\61\0\1\123"+
    "\3\0\1\124\113\0\1\125\20\0\2\126\12\0\2\127"+
    "\6\0\2\130\6\0\2\131\32\0\2\132\4\0\2\133"+
    "\2\134\2\135\2\136\2\137\2\0\1\140\1\141\2\142"+
    "\2\143\2\144\2\145\2\146\2\147\2\150\2\151\2\0"+
    "\2\152\2\153\2\154\2\155\2\156\14\0\2\157\4\0"+
    "\2\160\2\161\10\0\2\162\4\0\2\163\44\0\2\164"+
    "\4\0\2\165\6\0\2\166\6\0\2\167\2\0\2\170"+
    "\10\0\2\171\24\0\2\172\4\0\2\173\10\0\2\174"+
    "\22\0\2\175\26\0\2\176\20\0\2\177\2\200\50\0"+
    "\2\201\10\0\2\202\50\0\2\203\16\0\1\204\51\0"+
    "\2\203\106\0\2\205\2\206\4\0\2\207\2\210\12\0"+
    "\2\211\2\212\36\0\2\213\54\0\1\214\1\215\2\0"+
    "\2\216\6\0\2\217\2\0\2\220\2\0\1\221\3\0"+
    "\2\222\2\223\32\0\2\224\2\0\2\225\24\0\2\226"+
    "\42\0\2\227\16\0\2\230\22\0\2\231\16\0\2\232"+
    "\2\233\2\0\2\234\2\235\12\0\2\236\2\237\6\0"+
    "\2\240\12\0\2\241\52\0\2\242\56\0\2\243\54\0"+
    "\2\244\100\0\2\245\2\0\2\246\4\0\2\247\22\0"+
    "\2\250\16\0\2\251\10\0\2\252\34\0\2\253\26\0"+
    "\2\254\107\0\1\255\115\0\1\256\51\0\1\257\75\0"+
    "\1\260\116\0\1\261\42\0\1\262\11\0\1\263\17\0"+
    "\71\63\43\0\1\264\71\0\1\265\13\0\1\266\31\0"+
    "\1\267\61\0\1\270\101\0\1\271\105\0\1\272\57\0"+
    "\1\273\1\0\1\274\3\0\1\275\11\0\1\276\71\0"+
    "\1\277\63\0\1\300\65\0\1\301\47\0\1\302\27\0"+
    "\1\303\32\0\1\304\50\0\1\305\65\0\1\306\67\0"+
    "\1\307\47\0\1\310\65\0\1\311\75\0\1\312\113\0"+
    "\1\313\43\0\1\314\145\0\1\315\23\0\1\316\73\0"+
    "\1\317\105\0\1\320\101\0\1\321\65\0\1\322\51\0"+
    "\1\323\101\0\1\324\77\0\1\325\37\0\1\326\121\0"+
    "\1\327\111\0\1\330\77\0\1\331\33\0\1\332\73\0"+
    "\1\333\52\0\2\334\104\0\2\335\50\0\2\336\12\0"+
    "\2\337\6\0\2\340\6\0\2\341\34\0\2\342\1\0"+
    "\1\343\2\0\2\344\2\345\10\0\2\346\4\0\2\347"+
    "\43\0\1\350\2\351\4\0\2\352\6\0\2\353\6\0"+
    "\2\354\2\0\2\355\10\0\2\356\24\0\2\357\4\0"+
    "\2\360\10\0\2\361\22\0\2\362\26\0\2\363\20\0"+
    "\2\364\2\365\50\0\2\366\10\0\2\367\50\0\2\370"+
    "\16\0\1\371\51\0\2\370\106\0\2\372\2\373\4\0"+
    "\2\374\2\375\12\0\2\376\2\377\36\0\2\u0100\53\0"+
    "\1\u0101\1\u0102\1\u0103\2\0\2\u0104\6\0\2\u0105\2\0"+
    "\2\u0106\2\0\1\u0107\3\0\2\u0108\2\u0109\32\0\2\u010a"+
    "\1\0\1\u010b\2\u010c\24\0\2\u010d\42\0\2\u010e\16\0"+
    "\2\u010f\22\0\2\u0110\16\0\2\u0111\2\u0112\2\0\2\u0113"+
    "\2\u0114\12\0\2\u0115\2\u0116\6\0\2\u0117\12\0\2\u0118"+
    "\23\0\1\u0119\26\0\2\u011a\56\0\2\u011b\54\0\2\u011c"+
    "\67\0\1\u011d\71\0\1\u011e\10\0\2\u011f\2\0\2\u0120"+
    "\4\0\2\u0121\22\0\2\u0122\16\0\2\u0123\10\0\2\u0124"+
    "\34\0\2\u0125\26\0\2\u0126\106\0\2\u0127\52\0\2\u0128"+
    "\62\0\2\u0129\112\0\2\u012a\76\0\2\u012b\66\0\2\u012c"+
    "\64\0\2\u012d\60\0\2\u012e\70\0\2\u012f\112\0\2\u0130"+
    "\76\0\2\u0131\56\0\2\u0132\62\0\2\u0133\6\0\2\u0134"+
    "\52\0\2\u0135\110\0\2\u0136\112\0\1\u0137\47\0\2\u0138"+
    "\62\0\2\u0139\22\0\2\u013a\56\0\2\u013b\60\0\2\u013c"+
    "\54\0\1\u013d\17\0\1\u013e\67\0\2\u013f\36\0\2\u0140"+
    "\42\0\2\u0141\40\0\2\u0142\74\0\2\u0143\54\0\2\u0144"+
    "\12\0\2\u0143\50\0\2\u0145\74\0\2\u0146\116\0\2\u0147"+
    "\42\0\2\u0144\64\0\2\u0148\14\0\2\u0149\60\0\2\u014a"+
    "\106\0\2\u014b\44\0\2\u014c\74\0\2\u014d\72\0\2\u014e"+
    "\107\0\1\u014f\14\0\1\u014f\43\0\2\u0150\10\0\2\u0151"+
    "\42\0\2\u0152\76\0\2\u0153\74\0\2\u0154\116\0\2\u0155"+
    "\64\0\2\u0156\64\0\2\u0157\40\0\2\u0158\116\0\2\u0159"+
    "\2\u015a\102\0\2\u015b\76\0\2\u015c\20\0\2\u015d\74\0"+
    "\2\u015e\64\0\2\u015f\12\0\2\u0160\100\0\2\u0161\66\0"+
    "\2\u0162\121\0\1\u0163\61\0\1\u0164\33\0\1\u0165\115\0"+
    "\1\u0166\67\0\1\u0167\121\0\1\u0168\71\0\1\u0169\63\0"+
    "\1\u016a\77\0\1\u016b\27\0\1\u016c\25\0\1\u016d\103\0"+
    "\1\u016e\37\0\1\u016f\61\0\1\u0170\67\0\1\u0171\61\0"+
    "\1\u0172\125\0\1\u0173\65\0\1\u0174\53\0\1\u0175\13\0"+
    "\1\u0176\75\0\1\u0177\43\0\1\u0178\111\0\1\u0179\45\0"+
    "\1\u017a\67\0\1\u017b\73\0\1\u017c\123\0\1\u017d\35\0"+
    "\1\u017e\127\0\1\u017f\71\0\1\u0180\65\0\1\u0181\117\0"+
    "\1\u0182\37\0\1\u0183\45\0\1\u0184\115\0\1\u0185\65\0"+
    "\1\u0186\125\0\1\u0187\41\0\1\u0188\101\0\1\u0189\67\0"+
    "\1\u018a\115\0\1\u018b\33\0\1\u018c\107\0\1\u018d\11\0"+
    "\1\u018e\47\0\1\u018f\47\0\1\u0190\101\0\1\u0191\134\0"+
    "\1\u0192\16\0\1\u0193\121\0\1\u0194\56\0\2\u0195\100\0"+
    "\2\u0196\41\0\1\u0197\71\0\1\u0198\72\0\2\u0199\104\0"+
    "\2\u019a\74\0\2\u019b\52\0\2\u019c\62\0\2\u019d\112\0"+
    "\2\u019e\76\0\2\u019f\66\0\2\u01a0\64\0\2\u01a1\60\0"+
    "\2\u01a2\70\0\2\u01a3\112\0\2\u01a4\76\0\2\u01a5\56\0"+
    "\2\u01a6\62\0\2\u01a7\6\0\2\u01a8\52\0\2\u01a9\110\0"+
    "\2\u01aa\112\0\1\u01ab\47\0\2\u01ac\37\0\1\u01ad\114\0"+
    "\2\u01ae\22\0\2\u01af\56\0\2\u01b0\60\0\2\u01b1\54\0"+
    "\1\u01b2\17\0\1\u01b3\40\0\1\u01b4\120\0\2\u01b5\41\0"+
    "\1\u01b6\71\0\1\u01b7\66\0\2\u01b8\42\0\2\u01b9\40\0"+
    "\2\u01ba\57\0\1\u01bb\106\0\2\u01bc\54\0\2\u01bd\12\0"+
    "\2\u01bc\50\0\2\u01be\74\0\2\u01bf\116\0\2\u01c0\42\0"+
    "\2\u01bd\64\0\2\u01c1\14\0\2\u01c2\60\0\2\u01c3\106\0"+
    "\2\u01c4\44\0\2\u01c5\74\0\2\u01c6\72\0\2\u01c7\107\0"+
    "\1\u01c8\14\0\1\u01c8\32\0\1\u01c9\10\0\2\u01ca\10\0"+
    "\2\u01cb\42\0\2\u01cc\1\0\1\u01cd\71\0\1\u01ce\74\0"+
    "\2\u01cf\74\0\2\u01d0\61\0\1\u01d1\126\0\2\u01d2\33\0"+
    "\1\u01d3\122\0\2\u01d4\37\0\1\u01d5\116\0\2\u01d6\40\0"+
    "\2\u01d7\116\0\2\u01d8\2\u01d9\102\0\2\u01da\76\0\2\u01db"+
    "\20\0\2\u01dc\74\0\2\u01dd\64\0\2\u01de\12\0\2\u01df"+
    "\100\0\2\u01e0\66\0\2\u01e1\52\0\2\u01e2\64\0\2\u01e3"+
    "\102\0\2\u01e4\56\0\2\u01e5\122\0\2\u01e6\62\0\2\u01e7"+
    "\62\0\2\u01e8\62\0\2\u01e9\114\0\2\u01ea\70\0\2\u01eb"+
    "\60\0\2\u01ec\106\0\2\u01ed\62\0\2\u01ee\60\0\2\u01ef"+
    "\70\0\2\u01f0\106\0\2\u01f1\4\0\2\u01f2\30\0\2\u01f3"+
    "\60\0\2\u01f4\124\0\2\u01f5\72\0\1\u01f6\37\0\1\u01f7"+
    "\115\0\2\u01f8\54\0\2\u01f9\124\0\2\u01fa\52\0\2\u01fb"+
    "\62\0\2\u01fc\56\0\2\u01fd\34\0\2\u01fe\52\0\2\u01ff"+
    "\42\0\2\u0200\134\0\2\u0201\44\0\2\u0202\70\0\2\u0203"+
    "\120\0\2\u0204\50\0\2\u0205\60\0\2\u0206\76\0\2\u0207"+
    "\60\0\2\u0208\102\0\1\u0209\67\0\2\u020a\74\0\2\u020b"+
    "\46\0\2\u020c\60\0\2\u020d\104\0\2\u020e\70\0\2\u020f"+
    "\104\0\2\u0210\66\0\2\u0211\115\0\1\u0212\11\0\1\u0213"+
    "\103\0\1\u0214\143\0\1\u0215\37\0\1\u0216\25\0\1\u0217"+
    "\72\0\1\u0218\71\0\1\u0219\24\0\1\u021a\136\0\1\u021b"+
    "\66\0\1\u021c\31\0\1\u021d\117\0\1\u021e\53\0\1\u021f"+
    "\77\0\1\u0220\113\0\1\u0221\37\0\1\u0222\73\0\1\u0223"+
    "\51\0\1\u0224\65\0\1\u0225\121\0\1\u0226\67\0\1\u0227"+
    "\1\0\1\u0228\41\0\1\u0229\147\0\1\u022a\37\0\1\u022b"+
    "\51\0\1\u022c\71\0\1\u022d\111\0\1\u022e\57\0\1\u022f"+
    "\127\0\1\u0230\37\0\1\u0231\77\0\1\u0232\124\0\1\u0233"+
    "\22\0\1\u0234\115\0\1\u0235\113\0\1\u0236\43\0\1\u0237"+
    "\117\0\1\u0238\71\0\1\u0239\71\0\1\u023a\37\0\1\u023b"+
    "\124\0\1\u023c\16\0\1\u023d\111\0\1\u023e\107\0\1\u023f"+
    "\77\0\1\u0240\31\0\1\u0241\135\0\1\u0242\7\0\65\u0192"+
    "\1\u0243\4\u0192\36\0\1\u0244\37\0\1\u0245\114\0\2\u0246"+
    "\100\0\2\u0247\42\0\2\u0248\64\0\2\u0249\102\0\2\u024a"+
    "\56\0\2\u024b\122\0\2\u024c\62\0\2\u024d\62\0\2\u024e"+
    "\55\0\1\u024f\76\0\2\u0250\114\0\2\u0251\37\0\1\u0252"+
    "\122\0\2\u0253\60\0\2\u0254\47\0\1\u0255\36\0\2\u0256"+
    "\62\0\2\u0257\60\0\2\u0258\70\0\2\u0259\106\0\2\u025a"+
    "\4\0\2\u025b\30\0\2\u025c\60\0\2\u025d\124\0\2\u025e"+
    "\37\0\1\u025f\124\0\1\u0260\37\0\1\u0261\70\0\1\u0262"+
    "\71\0\1\u0263\71\0\1\u0264\71\0\1\u0265\116\0\2\u0266"+
    "\54\0\2\u0267\124\0\2\u0268\52\0\2\u0269\62\0\2\u026a"+
    "\56\0\2\u026b\34\0\2\u026c\52\0\2\u026d\41\0\1\u026e"+
    "\71\0\1\u026f\72\0\2\u0270\134\0\2\u0271\44\0\2\u0272"+
    "\70\0\2\u0273\120\0\2\u0274\50\0\2\u0275\60\0\2\u0276"+
    "\76\0\2\u0277\60\0\2\u0278\102\0\1\u0279\67\0\2\u027a"+
    "\41\0\1\u027b\71\0\1\u027c\71\0\1\u027d\124\0\2\u027e"+
    "\35\0\1\u027f\102\0\2\u0280\60\0\2\u0281\104\0\2\u0282"+
    "\70\0\2\u0283\104\0\2\u0284\66\0\2\u0285\41\0\1\u0286"+
    "\102\0\2\u0287\100\0\2\u0288\70\0\2\u0289\116\0\2\u028a"+
    "\72\0\2\u028b\26\0\2\u028c\126\0\2\u028d\20\0\2\u028e"+
    "\114\0\2\u028f\54\0\2\u0290\60\0\2\u0291\102\0\2\u0292"+
    "\56\0\2\u0293\74\0\2\u0294\134\0\2\u0295\50\0\2\u0296"+
    "\72\0\2\u0297\46\0\2\u0298\74\0\2\u0299\130\0\2\u029a"+
    "\40\0\2\u029b\64\0\2\u029c\64\0\2\u029d\106\0\2\u029e"+
    "\52\0\2\u029f\124\0\2\u02a0\24\0\2\u02a1\110\0\2\u02a2"+
    "\62\0\2\u02a3\56\0\2\u02a4\110\0\2\u02a5\100\0\2\u02a6"+
    "\56\0\2\u02a7\66\0\2\u02a8\74\0\2\u02a9\66\0\2\u02aa"+
    "\126\0\1\u02ab\46\0\1\u02ac\61\0\1\u02ad\71\0\1\u02ae"+
    "\51\0\1\u02af\144\0\1\u02b0\4\0\65\u0218\1\u02b1\4\u0218"+
    "\65\u0219\1\u02b2\4\u0219\22\0\1\u02b3\47\0\65\u021b\1\u02b4"+
    "\4\u021b\64\0\1\u02b5\71\0\1\u02b6\13\0\1\u02b7\71\0"+
    "\1\u02b8\103\0\1\u02b9\103\0\1\u02ba\73\0\1\u02bb\57\0"+
    "\1\u02bc\65\0\1\u02bd\137\0\1\u02be\17\0\1\u02bf\115\0"+
    "\1\u02c0\45\0\1\u02c1\143\0\1\u02c2\72\0\1\u02c3\64\0"+
    "\1\u02c4\41\0\1\u02c5\77\0\1\u02c6\55\0\1\u02c7\77\0"+
    "\1\u02c8\77\0\1\u02c9\71\0\1\u02ca\117\0\1\u02cb\5\0"+
    "\65\u0233\1\u02cc\4\u0233\42\0\1\u02cd\113\0\1\u02ce\72\0"+
    "\1\u02cf\46\0\1\u02d0\114\0\1\u02d1\71\0\1\u02d2\71\0"+
    "\1\u02d3\70\0\1\u02d4\5\0\65\u023c\1\u02d5\4\u023c\36\0"+
    "\1\u02d6\117\0\1\u02d7\27\0\1\u02d8\67\0\1\u02d9\103\0"+
    "\1\u02da\123\0\1\u02db\71\0\1\u02dc\71\0\1\u02dd\15\0"+
    "\1\u02de\71\0\1\u02df\71\0\1\u02e0\71\0\1\u02e1\102\0"+
    "\2\u02e2\100\0\2\u02e3\70\0\2\u02e4\47\0\1\u02e5\46\0"+
    "\2\u02e6\21\0\1\u02e7\142\0\2\u02e8\26\0\2\u02e9\126\0"+
    "\2\u02ea\23\0\1\u02eb\66\0\2\u02ec\114\0\2\u02ed\47\0"+
    "\1\u02ee\76\0\2\u02ef\60\0\2\u02f0\102\0\2\u02f1\56\0"+
    "\2\u02f2\74\0\2\u02f3\134\0\2\u02f4\23\0\1\u02f5\71\0"+
    "\1\u02f6\71\0\1\u02f7\71\0\1\u02f8\116\0\2\u02f9\72\0"+
    "\2\u02fa\46\0\2\u02fb\74\0\2\u02fc\130\0\2\u02fd\40\0"+
    "\2\u02fe\64\0\2\u02ff\64\0\2\u0300\106\0\2\u0301\52\0"+
    "\2\u0302\57\0\1\u0303\136\0\2\u0304\24\0\2\u0305\110\0"+
    "\2\u0306\62\0\2\u0307\56\0\2\u0308\110\0\2\u0309\100\0"+
    "\2\u030a\56\0\2\u030b\66\0\2\u030c\74\0\2\u030d\47\0"+
    "\1\u030e\71\0\1\u030f\110\0\2\u0310\64\0\2\u0311\100\0"+
    "\2\u0312\76\0\2\u0313\46\0\2\u0314\124\0\2\u0315\36\0"+
    "\2\u0316\66\0\2\u0317\70\0\2\u0318\56\0\2\u0319\124\0"+
    "\2\u031a\46\0\2\u031b\72\0\2\u031c\124\0\2\u031d\40\0"+
    "\2\u031e\72\0\2\u031f\102\0\2\u0320\70\0\2\u0321\76\0"+
    "\2\u0322\52\0\2\u0323\100\0\2\u0324\56\0\2\u0325\62\0"+
    "\2\u0326\76\0\2\u0327\46\0\2\u0328\114\0\2\u0329\70\0"+
    "\2\u032a\72\0\2\u032b\70\0\2\u032c\35\0\65\u02ab\1\u032d"+
    "\4\u02ab\64\0\1\u032e\71\0\1\u032f\61\0\1\u0330\37\0"+
    "\1\u0331\47\0\65\u02b0\1\u0332\4\u02b0\64\0\1\u0333\72\0"+
    "\1\u0334\71\0\1\u0335\24\0\1\u0336\135\0\1\u0337\13\0"+
    "\1\u0338\113\0\1\u0339\125\0\1\u033a\47\0\1\u033b\71\0"+
    "\1\u033c\114\0\1\u033d\26\0\1\u033e\61\0\1\u033f\107\0"+
    "\1\u0340\126\0\1\u0341\4\0\65\u02c3\1\u0342\4\u02c3\64\0"+
    "\1\u0343\37\0\1\u0344\123\0\1\u0345\55\0\1\u0346\55\0"+
    "\1\u0347\27\0\1\u0348\45\0\1\u0349\63\0\1\u034a\124\0"+
    "\1\u034b\36\0\1\u034c\124\0\1\u034d\4\0\65\u02cf\1\u034e"+
    "\4\u02cf\64\0\1\u034f\5\0\65\u02d1\1\u0350\4\u02d1\65\u02d2"+
    "\1\u0351\4\u02d2\65\u02d3\1\u0352\4\u02d3\65\0\1\u0353\70\0"+
    "\1\u0354\72\0\1\u0355\70\0\1\u0356\27\0\1\u0357\133\0"+
    "\1\u0358\72\0\1\u0359\71\0\1\u035a\71\0\1\u035b\27\0"+
    "\2\u035c\100\0\2\u035d\76\0\2\u035e\46\0\2\u035f\124\0"+
    "\2\u0360\36\0\2\u0361\66\0\2\u0362\70\0\2\u0363\56\0"+
    "\2\u0364\124\0\2\u0365\46\0\2\u0366\72\0\2\u0367\124\0"+
    "\2\u0368\40\0\2\u0369\72\0\2\u036a\102\0\2\u036b\37\0"+
    "\1\u036c\122\0\2\u036d\76\0\2\u036e\52\0\2\u036f\47\0"+
    "\1\u0370\71\0\1\u0371\122\0\2\u0372\37\0\1\u0373\110\0"+
    "\2\u0374\62\0\2\u0375\76\0\2\u0376\51\0\1\u0377\71\0"+
    "\1\u0378\66\0\2\u0379\73\0\1\u037a\71\0\1\u037b\112\0"+
    "\2\u037c\70\0\2\u037d\47\0\1\u037e\22\0\2\u037f\70\0"+
    "\2\u0380\62\0\2\u0381\76\0\2\u0382\56\0\2\u0383\112\0"+
    "\2\u0384\46\0\2\u0385\112\0\2\u0386\70\0\2\u0387\62\0"+
    "\2\u0388\64\0\2\u0389\70\0\2\u038a\106\0\2\u038b\52\0"+
    "\2\u038c\104\0\2\u038d\54\0\2\u038e\70\0\2\u038f\124\0"+
    "\1\u0390\71\0\1\u0391\50\0\1\u0392\111\0\1\u0393\72\0"+
    "\1\u0394\4\0\65\u0334\1\u0395\4\u0334\65\u0335\1\u0396\4\u0335"+
    "\44\0\1\u0397\112\0\1\u0398\70\0\1\u0399\71\0\1\u039a"+
    "\72\0\1\u039b\70\0\1\u039c\71\0\1\u039d\5\0\65\u033d"+
    "\1\u039e\4\u033d\64\0\1\u039f\23\0\1\u03a0\103\0\1\u03a1"+
    "\41\0\65\u0341\1\u03a2\4\u0341\65\0\1\u03a3\71\0\1\u03a4"+
    "\46\0\1\u03a5\113\0\1\u03a6\72\0\1\u03a7\36\0\1\u03a8"+
    "\123\0\1\u03a9\5\0\65\u034b\1\u03aa\4\u034b\30\0\1\u03ab"+
    "\41\0\65\u034d\1\u03ac\4\u034d\65\0\1\u03ad\4\0\65\u0353"+
    "\1\u03ae\4\u0353\65\0\1\u03af\4\0\65\u0355\1\u03b0\4\u0355"+
    "\65\0\1\u03b1\70\0\1\u03b2\72\0\1\u03b3\4\0\65\u0359"+
    "\1\u03b4\4\u0359\65\u035a\1\u03b5\4\u035a\65\u035b\1\u03b6\4\u035b"+
    "\25\0\2\u03b7\76\0\2\u03b8\45\0\1\u03b9\102\0\2\u03ba"+
    "\112\0\2\u03bb\35\0\1\u03bc\102\0\2\u03bd\112\0\2\u03be"+
    "\35\0\1\u03bf\71\0\1\u03c0\124\0\2\u03c1\35\0\1\u03c2"+
    "\116\0\2\u03c3\64\0\2\u03c4\47\0\1\u03c5\71\0\1\u03c6"+
    "\71\0\1\u03c7\71\0\1\u03c8\71\0\1\u03c9\112\0\2\u03ca"+
    "\47\0\1\u03cb\130\0\2\u03cc\31\0\1\u03cd\112\0\2\u03ce"+
    "\104\0\2\u03cf\33\0\1\u03d0\112\0\2\u03d1\70\0\2\u03d2"+
    "\100\0\2\u03d3\46\0\2\u03d4\106\0\2\u03d5\70\0\2\u03d6"+
    "\74\0\2\u03d7\62\0\2\u03d8\102\0\2\u03d9\34\0\2\u03da"+
    "\120\0\2\u03db\70\0\2\u03dc\27\0\65\u0390\1\u03dd\4\u0390"+
    "\65\u0391\1\u03de\4\u0391\56\0\1\u03df\100\0\1\u03e0\4\0"+
    "\65\u0394\1\u03e1\4\u0394\22\0\1\u03e2\47\0\65\u0398\1\u03e3"+
    "\4\u0398\65\0\1\u03e4\71\0\1\u03e5\4\0\65\u039b\1\u03e6"+
    "\4\u039b\65\0\1\u03e7\71\0\1\u03e8\71\0\1\u03e9\62\0"+
    "\1\u03ea\71\0\1\u03eb\13\0\65\u03a3\1\u03ec\4\u03a3\65\u03a4"+
    "\1\u03ed\4\u03a4\4\0\1\u03ee\152\0\1\u03ef\4\0\65\u03a7"+
    "\1\u03f0\4\u03a7\64\0\1\u03f1\72\0\1\u03f2\70\0\1\u03f3"+
    "\5\0\65\u03ad\1\u03f4\4\u03ad\65\u03af\1\u03f5\4\u03af\65\u03b1"+
    "\1\u03f6\4\u03b1\65\0\1\u03f7\4\0\65\u03b3\1\u03f8\4\u03b3"+
    "\10\0\1\u03f9\71\0\1\u03fa\122\0\2\u03fb\46\0\2\u03fc"+
    "\61\0\1\u03fd\116\0\2\u03fe\70\0\2\u03ff\74\0\2\u0400"+
    "\62\0\2\u0401\102\0\2\u0402\33\0\1\u0403\72\0\2\u0404"+
    "\67\0\1\u0405\122\0\2\u0406\70\0\2\u0407\70\0\2\u0408"+
    "\70\0\2\u0409\101\0\1\u040a\17\0\65\u03e0\1\u040b\4\u03e0"+
    "\30\0\1\u040c\41\0\65\u03e4\1\u040d\4\u03e4\65\u03e5\1\u040e"+
    "\4\u03e5\65\u03e7\1\u040f\4\u03e7\65\u03e8\1\u0410\4\u03e8\65\u03e9"+
    "\1\u0411\4\u03e9\22\0\1\u0412\71\0\1\u0413\133\0\1\u0414"+
    "\5\0\65\u03ef\1\u0415\4\u03ef\65\0\1\u0416\4\0\65\u03f2"+
    "\1\u0417\4\u03f2\65\0\1\u0418\4\0\65\u03f7\1\u0419\4\u03f7"+
    "\10\0\1\u041a\122\0\2\u041b\37\0\1\u041c\71\0\1\u041d"+
    "\71\0\1\u041e\71\0\1\u041f\122\0\2\u0420\37\0\1\u0421"+
    "\71\0\1\u0422\71\0\1\u0423\112\0\2\u0424\123\0\1\u0425"+
    "\71\0\1\u0426\55\0\1\u0427\71\0\1\u0428\106\0\1\u0429"+
    "\4\0\65\u0416\1\u042a\4\u0416\65\u0418\1\u042b\4\u0418\31\0"+
    "\2\u042c\47\0\1\u042d\146\0\1\u042e\71\0\1\u042f\70\0"+
    "\1\u0430\71\0\1\u0431\5\0\65\u0429\1\u0432\4\u0429\10\0"+
    "\1\u0433\61\0\65\u042e\1\u0434\4\u042e\65\u042f\1\u0435\4\u042f"+
    "\65\0\1\u0436\71\0\1\u0437\4\0\65\u0436\1\u0438\4\u0436"+
    "\65\u0437\1\u0439\4\u0437";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\2\0\2\1\7\0\2\1\2\0"+
    "\1\1\2\0\1\11\1\1\10\0\1\1\42\0\2\11"+
    "\50\0\1\11\4\0\1\11\1\0\2\11\2\0\1\11"+
    "\15\0\2\1\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\100\0\1\11\4\0\1\11\30\0\1\11\11\0"+
    "\1\11\15\0\1\11\3\0\2\11\17\0\1\11\2\0"+
    "\1\11\2\0\1\1\7\0\1\11\2\0\4\11\7\0"+
    "\2\11\13\0\3\11\1\0\1\11\6\0\1\11\62\0"+
    "\4\11\24\0\1\11\6\0\1\11\1\0\2\11\3\0"+
    "\1\11\15\0\1\11\3\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\14\0\2\11\3\0\1\1\1\11"+
    "\3\0\1\11\2\0\1\11\6\0\4\11\12\0\1\11"+
    "\12\0\2\11\62\0\1\11\13\0\1\11\2\0\1\11"+
    "\2\0\1\11\11\0\1\11\2\0\4\11\10\0\2\11"+
    "\13\0\3\11\1\0\1\11\6\0\1\11\20\0\1\11"+
    "\3\0\2\11\1\0\1\11\3\0\2\11\1\0\2\11"+
    "\2\0\1\1\7\0\2\11\1\0\1\11\27\0\1\11"+
    "\10\0\1\11\10\0\4\11\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\6\0\4\11\12\0\1\11"+
    "\12\0\2\11\3\0\1\11\2\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\5\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\4\0\1\11\17\0\1\11"+
    "\1\0\1\11\11\0\1\11\1\0\3\11\31\0\1\11"+
    "\3\0\2\11\1\0\1\11\3\0\2\11\1\0\2\11"+
    "\2\0\1\11\2\0\2\11\2\0\1\11\5\0\1\11"+
    "\1\0\1\11\7\0\2\11\7\0\1\11\3\0\1\11"+
    "\7\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\3\0\3\11\2\0\1\11\2\0\1\11\2\0\2\11"+
    "\1\0\1\11\2\0\5\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\0\4\11\1\0\5\11"+
    "\2\0\1\11\1\0\1\11\2\0\1\11\5\0\2\11"+
    "\2\0\1\11\3\0\3\11\1\0\3\11\2\0\1\11"+
    "\5\0\1\11\1\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\5\11\3\0\1\11\1\0\1\11\1\0\2\11"+
    "\1\0\4\11\1\0\4\11\5\0\2\11\1\0\1\11"+
    "\4\0\4\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { lexeme=yytext(); return DirOpen;
          }
        case 231: break;
        case 29: 
          { lexeme=yytext(); return QClose;
          }
        case 232: break;
        case 207: 
          { lexeme=yytext(); return ContentAttr;
          }
        case 233: break;
        case 226: 
          { lexeme=yytext(); return BlockquoteClose;
          }
        case 234: break;
        case 180: 
          { lexeme=yytext(); return OptgroupOpen;
          }
        case 235: break;
        case 37: 
          { lexeme=yytext(); return DivOpen;
          }
        case 236: break;
        case 218: 
          { lexeme=yytext(); return TextareaClose;
          }
        case 237: break;
        case 132: 
          { lexeme=yytext(); return HrefAttr;
          }
        case 238: break;
        case 228: 
          { lexeme=yytext(); return BackgroundAttr;
          }
        case 239: break;
        case 90: 
          { lexeme=yytext(); return SmallOpen;
          }
        case 240: break;
        case 12: 
          { lexeme=yytext(); return HnOpen;
          }
        case 241: break;
        case 58: 
          { lexeme=yytext(); return TdClose;
          }
        case 242: break;
        case 173: 
          { lexeme=yytext(); return StrongClose;
          }
        case 243: break;
        case 33: 
          { lexeme=yytext(); return ColOpen;
          }
        case 244: break;
        case 191: 
          { lexeme=yytext(); return NohrefAttr;
          }
        case 245: break;
        case 80: 
          { lexeme=yytext(); return DirClose;
          }
        case 246: break;
        case 159: 
          { lexeme=yytext(); return StartAttr;
          }
        case 247: break;
        case 40: 
          { lexeme=yytext(); return PreOpen;
          }
        case 248: break;
        case 11: 
          { lexeme=yytext(); return HrOpen;
          }
        case 249: break;
        case 52: 
          { lexeme=yytext(); return DlClose;
          }
        case 250: break;
        case 121: 
          { lexeme=yytext(); return CenterOpen;
          }
        case 251: break;
        case 141: 
          { lexeme=yytext(); return StyleClose;
          }
        case 252: break;
        case 135: 
          { lexeme=yytext(); return NoshadeAttr;
          }
        case 253: break;
        case 136: 
          { lexeme=yytext(); return SizeAttr;
          }
        case 254: break;
        case 88: 
          { lexeme=yytext(); return ImgClose;
          }
        case 255: break;
        case 72: 
          { lexeme=yytext(); return FormOpen;
          }
        case 256: break;
        case 39: 
          { lexeme=yytext(); return SubOpen;
          }
        case 257: break;
        case 229: 
          { lexeme=yytext(); return CellspacingAttr;
          }
        case 258: break;
        case 87: 
          { lexeme=yytext(); return InsClose;
          }
        case 259: break;
        case 224: 
          { lexeme=yytext(); return PlaintextClose;
          }
        case 260: break;
        case 171: 
          { lexeme=yytext(); return ScriptClose;
          }
        case 261: break;
        case 48: 
          { lexeme=yytext(); return HrClose;
          }
        case 262: break;
        case 22: 
          { lexeme=yytext(); return TTOpen;
          }
        case 263: break;
        case 47: 
          { lexeme=yytext(); return HtmlOpen;
          }
        case 264: break;
        case 139: 
          { lexeme=yytext(); return TextAttr;
          }
        case 265: break;
        case 30: 
          { lexeme=yytext(); return IClose;
          }
        case 266: break;
        case 176: 
          { lexeme=yytext(); return TheadClose;
          }
        case 267: break;
        case 147: 
          { lexeme=yytext(); return InputClose;
          }
        case 268: break;
        case 142: 
          { lexeme=yytext(); return ParamClose;
          }
        case 269: break;
        case 129: 
          { lexeme=yytext(); return LegendOpen;
          }
        case 270: break;
        case 227: 
          { lexeme=yytext(); return HTTP_EQUIV_Attr;
          }
        case 271: break;
        case 66: 
          { lexeme=yytext(); return CiteOpen;
          }
        case 272: break;
        case 117: 
          { lexeme=yytext(); return FormClose;
          }
        case 273: break;
        case 214: 
          { lexeme=yytext(); return ColgroupClose;
          }
        case 274: break;
        case 104: 
          { lexeme=yytext(); return HeadClose;
          }
        case 275: break;
        case 217: 
          { lexeme=yytext(); return NoframesClose;
          }
        case 276: break;
        case 64: 
          { lexeme=yytext(); return BodyOpen;
          }
        case 277: break;
        case 60: 
          { lexeme=yytext(); return UlClose;
          }
        case 278: break;
        case 21: 
          { lexeme=yytext(); return TdOpen;
          }
        case 279: break;
        case 202: 
          { lexeme=yytext(); return IsindexClose;
          }
        case 280: break;
        case 6: 
          { lexeme=yytext(); return SOpen;
          }
        case 281: break;
        case 112: 
          { lexeme=yytext(); return MenuClose;
          }
        case 282: break;
        case 181: 
          { lexeme=yytext(); return NoscriptOpen;
          }
        case 283: break;
        case 193: 
          { lexeme=yytext(); return MethodAttr;
          }
        case 284: break;
        case 186: 
          { lexeme=yytext(); return HeightAttr;
          }
        case 285: break;
        case 177: 
          { lexeme=yytext(); return IframeClose;
          }
        case 286: break;
        case 68: 
          { lexeme=yytext(); return MetaOpen;
          }
        case 287: break;
        case 19: 
          { lexeme=yytext(); return ThOpen;
          }
        case 288: break;
        case 62: 
          { lexeme=yytext(); return AbbrOpen;
          }
        case 289: break;
        case 200: 
          { lexeme=yytext(); return CaptionClose;
          }
        case 290: break;
        case 100: 
          { lexeme=yytext(); return RevAttr;
          }
        case 291: break;
        case 201: 
          { lexeme=yytext(); return ListingClose;
          }
        case 292: break;
        case 120: 
          { lexeme=yytext(); return ButtonOpen;
          }
        case 293: break;
        case 195: 
          { lexeme=yytext(); return UsemapAttr;
          }
        case 294: break;
        case 49: 
          { lexeme=yytext(); return HnClose;
          }
        case 295: break;
        case 1: 
          { return ERROR;
          }
        case 296: break;
        case 220: 
          { lexeme=yytext(); return FieldsetClose;
          }
        case 297: break;
        case 128: 
          { lexeme=yytext(); return StrikeOpen;
          }
        case 298: break;
        case 145: 
          { lexeme=yytext(); return TbodyClose;
          }
        case 299: break;
        case 23: 
          { lexeme=yytext(); return UlOpen;
          }
        case 300: break;
        case 70: 
          { lexeme=yytext(); return SpanOpen;
          }
        case 301: break;
        case 109: 
          { lexeme=yytext(); return BodyClose;
          }
        case 302: break;
        case 203: 
          { lexeme=yytext(); return PlaintextOpen;
          }
        case 303: break;
        case 187: 
          { lexeme=yytext(); return HspaceAttr;
          }
        case 304: break;
        case 182: 
          { lexeme=yytext(); return NoframesOpen;
          }
        case 305: break;
        case 133: 
          { lexeme=yytext(); return RowsAttr;
          }
        case 306: break;
        case 114: 
          { lexeme=yytext(); return SampClose;
          }
        case 307: break;
        case 189: 
          { lexeme=yytext(); return BorderAttr;
          }
        case 308: break;
        case 14: 
          { lexeme=yytext(); return DDOpen;
          }
        case 309: break;
        case 174: 
          { lexeme=yytext(); return StrikeClose;
          }
        case 310: break;
        case 25: 
          { lexeme=yytext(); return BClose;
          }
        case 311: break;
        case 153: 
          { lexeme=yytext(); return IsindexOpen;
          }
        case 312: break;
        case 82: 
          { lexeme=yytext(); return DFNClose;
          }
        case 313: break;
        case 74: 
          { lexeme=yytext(); return IdAttr;
          }
        case 314: break;
        case 95: 
          { lexeme=yytext(); return TbodyOpen;
          }
        case 315: break;
        case 102: 
          { lexeme=yytext(); return SrcAttr;
          }
        case 316: break;
        case 65: 
          { lexeme=yytext(); return CodeOpen;
          }
        case 317: break;
        case 158: 
          { lexeme=yytext(); return ShapeAttr;
          }
        case 318: break;
        case 34: 
          { lexeme=yytext(); return MapOpen;
          }
        case 319: break;
        case 13: 
          { lexeme=yytext(); return OlOpen;
          }
        case 320: break;
        case 179: 
          { lexeme=yytext(); return ColgroupOpen;
          }
        case 321: break;
        case 148: 
          { lexeme=yytext(); return FrameClose;
          }
        case 322: break;
        case 134: 
          { lexeme=yytext(); return NameAttr;
          }
        case 323: break;
        case 54: 
          { lexeme=yytext(); return EmClose;
          }
        case 324: break;
        case 24: 
          { lexeme=yytext(); return AClose;
          }
        case 325: break;
        case 50: 
          { lexeme=yytext(); return OlClose;
          }
        case 326: break;
        case 146: 
          { lexeme=yytext(); return TitleClose;
          }
        case 327: break;
        case 125: 
          { lexeme=yytext(); return ScriptOpen;
          }
        case 328: break;
        case 140: 
          { lexeme=yytext(); return SmallClose;
          }
        case 329: break;
        case 166: 
          { lexeme=yytext(); return ButtonClose;
          }
        case 330: break;
        case 230: 
          { lexeme=yytext(); return CellpaddingAttr;
          }
        case 331: break;
        case 197: 
          { lexeme=yytext(); return VspaceAttr;
          }
        case 332: break;
        case 92: 
          { lexeme=yytext(); return ParamOpen;
          }
        case 333: break;
        case 7: 
          { lexeme=yytext(); return POpen;
          }
        case 334: break;
        case 113: 
          { lexeme=yytext(); return MetaClose;
          }
        case 335: break;
        case 122: 
          { lexeme=yytext(); return ObjectOpen;
          }
        case 336: break;
        case 165: 
          { lexeme=yytext(); return AppletClose;
          }
        case 337: break;
        case 212: 
          { lexeme=yytext(); return VersionAttr;
          }
        case 338: break;
        case 172: 
          { lexeme=yytext(); return SelectClose;
          }
        case 339: break;
        case 59: 
          { lexeme=yytext(); return TTClose;
          }
        case 340: break;
        case 168: 
          { lexeme=yytext(); return ObjectClose;
          }
        case 341: break;
        case 101: 
          { lexeme=yytext(); return AltAttr;
          }
        case 342: break;
        case 150: 
          { lexeme=yytext(); return AddressOpen;
          }
        case 343: break;
        case 138: 
          { lexeme=yytext(); return TypeAttr;
          }
        case 344: break;
        case 107: 
          { lexeme=yytext(); return AbbrClose;
          }
        case 345: break;
        case 86: 
          { lexeme=yytext(); return VarClose;
          }
        case 346: break;
        case 41: 
          { lexeme=yytext(); return XmpOpen;
          }
        case 347: break;
        case 67: 
          { lexeme=yytext(); return MenuOpen;
          }
        case 348: break;
        case 209: 
          { lexeme=yytext(); return ColspanAttr;
          }
        case 349: break;
        case 124: 
          { lexeme=yytext(); return NextidOpen;
          }
        case 350: break;
        case 123: 
          { lexeme=yytext(); return OptionOpen;
          }
        case 351: break;
        case 199: 
          { lexeme=yytext(); return AddressClose;
          }
        case 352: break;
        case 38: 
          { lexeme=yytext(); return DFNOpen;
          }
        case 353: break;
        case 105: 
          { lexeme=yytext(); return HtmlClose;
          }
        case 354: break;
        case 204: 
          { lexeme=yytext(); return RowspanAttr;
          }
        case 355: break;
        case 127: 
          { lexeme=yytext(); return StrongOpen;
          }
        case 356: break;
        case 89: 
          { lexeme=yytext(); return KbdClose;
          }
        case 357: break;
        case 63: 
          { lexeme=yytext(); return BaseOpen;
          }
        case 358: break;
        case 4: 
          { lexeme=yytext(); return AOpen;
          }
        case 359: break;
        case 213: 
          { lexeme=yytext(); return BaseFontClose;
          }
        case 360: break;
        case 35: 
          { lexeme=yytext(); return DelOpen;
          }
        case 361: break;
        case 78: 
          { lexeme=yytext(); return MapClose;
          }
        case 362: break;
        case 160: 
          { lexeme=yytext(); return TitleAttr;
          }
        case 363: break;
        case 32: 
          { lexeme=yytext(); return BigOpen;
          }
        case 364: break;
        case 184: 
          { lexeme=yytext(); return FramesetOpen;
          }
        case 365: break;
        case 98: 
          { lexeme=yytext(); return FrameOpen;
          }
        case 366: break;
        case 55: 
          { lexeme=yytext(); return LiClose;
          }
        case 367: break;
        case 76: 
          { lexeme=yytext(); return BigClose;
          }
        case 368: break;
        case 61: 
          { lexeme=yytext(); return AreaOpen;
          }
        case 369: break;
        case 116: 
          { lexeme=yytext(); return LinkClose;
          }
        case 370: break;
        case 169: 
          { lexeme=yytext(); return OptionClose;
          }
        case 371: break;
        case 115: 
          { lexeme=yytext(); return SpanClose;
          }
        case 372: break;
        case 208: 
          { lexeme=yytext(); return CompactAttr;
          }
        case 373: break;
        case 42: 
          { lexeme=yytext(); return VarOpen;
          }
        case 374: break;
        case 77: 
          { lexeme=yytext(); return ColClose;
          }
        case 375: break;
        case 10: 
          { lexeme=yytext(); return IOpen;
          }
        case 376: break;
        case 222: 
          { lexeme=yytext(); return MultipleAttr;
          }
        case 377: break;
        case 161: 
          { lexeme=yytext(); return ValueAttr;
          }
        case 378: break;
        case 152: 
          { lexeme=yytext(); return ListingOpen;
          }
        case 379: break;
        case 44: 
          { lexeme=yytext(); return ImgOpen;
          }
        case 380: break;
        case 137: 
          { lexeme=yytext(); return LinkAttr;
          }
        case 381: break;
        case 183: 
          { lexeme=yytext(); return TextareaOpen;
          }
        case 382: break;
        case 219: 
          { lexeme=yytext(); return FramesetClose;
          }
        case 383: break;
        case 131: 
          { lexeme=yytext(); return IframeOpen;
          }
        case 384: break;
        case 15: 
          { lexeme=yytext(); return DlOpen;
          }
        case 385: break;
        case 43: 
          { lexeme=yytext(); return InsOpen;
          }
        case 386: break;
        case 164: 
          { lexeme=yytext(); return WidthAttr;
          }
        case 387: break;
        case 99: 
          { lexeme=yytext(); return RelAttr;
          }
        case 388: break;
        case 108: 
          { lexeme=yytext(); return BaseClose;
          }
        case 389: break;
        case 126: 
          { lexeme=yytext(); return SelectOpen;
          }
        case 390: break;
        case 111: 
          { lexeme=yytext(); return CiteClose;
          }
        case 391: break;
        case 9: 
          { lexeme=yytext(); return QOpen;
          }
        case 392: break;
        case 178: 
          { lexeme=yytext(); return BaseFontOpen;
          }
        case 393: break;
        case 225: 
          { lexeme=yytext(); return MaxlengthAttr;
          }
        case 394: break;
        case 192: 
          { lexeme=yytext(); return NowrapAttr;
          }
        case 395: break;
        case 3: 
          { lexeme=yytext(); return Content;
          }
        case 396: break;
        case 91: 
          { lexeme=yytext(); return StyleOpen;
          }
        case 397: break;
        case 45: 
          { lexeme=yytext(); return KbdOpen;
          }
        case 398: break;
        case 94: 
          { lexeme=yytext(); return TableOpen;
          }
        case 399: break;
        case 198: 
          { lexeme=yytext(); return AcronymClose;
          }
        case 400: break;
        case 16: 
          { lexeme=yytext(); return DtOpen;
          }
        case 401: break;
        case 211: 
          { lexeme=yytext(); return EnctypeAttr;
          }
        case 402: break;
        case 170: 
          { lexeme=yytext(); return NextidClose;
          }
        case 403: break;
        case 18: 
          { lexeme=yytext(); return LiOpen;
          }
        case 404: break;
        case 96: 
          { lexeme=yytext(); return TitleOpen;
          }
        case 405: break;
        case 57: 
          { lexeme=yytext(); return TrClose;
          }
        case 406: break;
        case 8: 
          { lexeme=yytext(); return UOpen;
          }
        case 407: break;
        case 194: 
          { lexeme=yytext(); return PromptAttr;
          }
        case 408: break;
        case 144: 
          { lexeme=yytext(); return TableClose;
          }
        case 409: break;
        case 119: 
          { lexeme=yytext(); return AppletOpen;
          }
        case 410: break;
        case 156: 
          { lexeme=yytext(); return ColorAttr;
          }
        case 411: break;
        case 97: 
          { lexeme=yytext(); return InputOpen;
          }
        case 412: break;
        case 31: 
          { lexeme=yytext(); return BdoOpen;
          }
        case 413: break;
        case 163: 
          { lexeme=yytext(); return IsmapAttr;
          }
        case 414: break;
        case 103: 
          { lexeme=yytext(); return UrnAttr;
          }
        case 415: break;
        case 118: 
          { lexeme=yytext(); return FontClose;
          }
        case 416: break;
        case 71: 
          { lexeme=yytext(); return LinkOpen;
          }
        case 417: break;
        case 2: 
          { /*Ignore*/
          }
        case 418: break;
        case 85: 
          { lexeme=yytext(); return XmpClose;
          }
        case 419: break;
        case 110: 
          { lexeme=yytext(); return CodeClose;
          }
        case 420: break;
        case 20: 
          { lexeme=yytext(); return TrOpen;
          }
        case 421: break;
        case 149: 
          { lexeme=yytext(); return AcronymOpen;
          }
        case 422: break;
        case 5: 
          { lexeme=yytext(); return BOpen;
          }
        case 423: break;
        case 210: 
          { lexeme=yytext(); return MethodsAttr;
          }
        case 424: break;
        case 155: 
          { lexeme=yytext(); return AlignAttr;
          }
        case 425: break;
        case 46: 
          { lexeme=yytext(); return HeadOpen;
          }
        case 426: break;
        case 205: 
          { lexeme=yytext(); return BgcolorAttr;
          }
        case 427: break;
        case 167: 
          { lexeme=yytext(); return CenterClose;
          }
        case 428: break;
        case 17: 
          { lexeme=yytext(); return EmOpen;
          }
        case 429: break;
        case 221: 
          { lexeme=yytext(); return BlockquoteOpen;
          }
        case 430: break;
        case 223: 
          { lexeme=yytext(); return SelectedAttr;
          }
        case 431: break;
        case 53: 
          { lexeme=yytext(); return DtClose;
          }
        case 432: break;
        case 215: 
          { lexeme=yytext(); return OptgroupClose;
          }
        case 433: break;
        case 175: 
          { lexeme=yytext(); return LegendClose;
          }
        case 434: break;
        case 93: 
          { lexeme=yytext(); return LabelOpen;
          }
        case 435: break;
        case 190: 
          { lexeme=yytext(); return CoordsAttr;
          }
        case 436: break;
        case 154: 
          { lexeme=yytext(); return AlinkAttr;
          }
        case 437: break;
        case 28: 
          { lexeme=yytext(); return UClose;
          }
        case 438: break;
        case 130: 
          { lexeme=yytext(); return TheadOpen;
          }
        case 439: break;
        case 83: 
          { lexeme=yytext(); return SubClose;
          }
        case 440: break;
        case 216: 
          { lexeme=yytext(); return NoscriptClose;
          }
        case 441: break;
        case 185: 
          { lexeme=yytext(); return FieldsetOpen;
          }
        case 442: break;
        case 151: 
          { lexeme=yytext(); return CaptionOpen;
          }
        case 443: break;
        case 206: 
          { lexeme=yytext(); return CheckedAttr;
          }
        case 444: break;
        case 143: 
          { lexeme=yytext(); return LabelClose;
          }
        case 445: break;
        case 75: 
          { lexeme=yytext(); return BdoClose;
          }
        case 446: break;
        case 56: 
          { lexeme=yytext(); return ThClose;
          }
        case 447: break;
        case 26: 
          { lexeme=yytext(); return SClose;
          }
        case 448: break;
        case 79: 
          { lexeme=yytext(); return DelClose;
          }
        case 449: break;
        case 51: 
          { lexeme=yytext(); return DDClose;
          }
        case 450: break;
        case 81: 
          { lexeme=yytext(); return DivClose;
          }
        case 451: break;
        case 73: 
          { lexeme=yytext(); return FontOpen;
          }
        case 452: break;
        case 106: 
          { lexeme=yytext(); return AreaClose;
          }
        case 453: break;
        case 162: 
          { lexeme=yytext(); return VlinkAttr;
          }
        case 454: break;
        case 84: 
          { lexeme=yytext(); return PreClose;
          }
        case 455: break;
        case 188: 
          { lexeme=yytext(); return ActionAttr;
          }
        case 456: break;
        case 196: 
          { lexeme=yytext(); return ValignAttr;
          }
        case 457: break;
        case 27: 
          { lexeme=yytext(); return PClose;
          }
        case 458: break;
        case 157: 
          { lexeme=yytext(); return ClearAttr;
          }
        case 459: break;
        case 69: 
          { lexeme=yytext(); return SampOpen;
          }
        case 460: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
