
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 08 21:30:08 EET 2020
//----------------------------------------------------

package work;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 08 21:30:08 EET 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\313\000\002\002\004\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\002\005\000\002\003\005\000\002\004" +
    "\005\000\002\005\005\000\002\006\005\000\002\011\005" +
    "\000\002\012\005\000\002\013\005\000\002\014\005\000" +
    "\002\015\005\000\002\017\005\000\002\016\005\000\002" +
    "\020\005\000\002\021\005\000\002\022\005\000\002\023" +
    "\005\000\002\010\005\000\002\007\005\000\002\024\005" +
    "\000\002\025\005\000\002\026\005\000\002\027\005\000" +
    "\002\030\005\000\002\031\005\000\002\032\005\000\002" +
    "\033\005\000\002\034\005\000\002\035\005\000\002\036" +
    "\005\000\002\037\005\000\002\040\005\000\002\041\005" +
    "\000\002\042\005\000\002\043\005\000\002\044\005\000" +
    "\002\045\005\000\002\046\005\000\002\047\005\000\002" +
    "\050\005\000\002\051\005\000\002\052\005\000\002\053" +
    "\005\000\002\054\005\000\002\055\005\000\002\056\005" +
    "\000\002\057\005\000\002\060\005\000\002\061\005\000" +
    "\002\062\005\000\002\063\005\000\002\064\005\000\002" +
    "\065\005\000\002\066\005\000\002\067\005\000\002\070" +
    "\005\000\002\071\005\000\002\071\006\000\002\072\005" +
    "\000\002\072\032\000\002\073\005\000\002\073\026\000" +
    "\002\074\005\000\002\074\006\000\002\075\005\000\002" +
    "\075\006\000\002\075\006\000\002\075\006\000\002\075" +
    "\006\000\002\075\006\000\002\075\006\000\002\076\005" +
    "\000\002\076\006\000\002\076\002\000\002\100\011\000" +
    "\002\077\011\000\002\101\011\000\002\102\015\000\002" +
    "\103\021\000\002\105\011\000\002\104\025\000\002\106" +
    "\011\000\002\107\005\000\002\107\006\000\002\107\006" +
    "\000\002\107\006\000\002\107\006\000\002\107\006\000" +
    "\002\107\006\000\002\107\006\000\002\107\006\000\002" +
    "\107\006\000\002\107\006\000\002\110\051\000\002\111" +
    "\011\000\002\112\015\000\002\113\041\000\002\114\011" +
    "\000\002\115\021\000\002\116\005\000\002\117\021\000" +
    "\002\120\015\000\002\121\011\000\002\122\011\000\002" +
    "\123\021\000\002\124\031\000\002\125\041\000\002\131" +
    "\021\000\002\126\041\000\002\127\015\000\002\130\015" +
    "\000\002\132\011\000\002\133\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02f4\000\270\002\uff5e\004\255\006\007\010\151\012" +
    "\036\014\004\016\113\020\053\022\012\024\046\026\157" +
    "\030\223\032\256\034\173\036\055\040\206\042\155\044" +
    "\170\046\062\050\214\052\017\054\254\056\261\060\056" +
    "\062\210\064\010\066\117\070\137\072\177\074\057\076" +
    "\163\100\041\102\167\104\060\106\106\110\116\112\045" +
    "\114\132\116\227\120\246\122\264\124\133\126\145\130" +
    "\245\132\220\134\035\136\162\140\131\142\230\144\115" +
    "\146\034\150\024\152\150\154\222\156\065\160\152\162" +
    "\156\164\104\166\075\170\244\172\032\174\165\176\141" +
    "\200\027\202\025\204\200\206\204\210\072\212\021\214" +
    "\201\216\252\220\043\222\022\224\161\226\202\230\215" +
    "\232\217\234\047\236\111\240\016\242\130\244\242\246" +
    "\054\250\164\252\135\254\171\256\243\260\101\262\070" +
    "\264\126\266\011\001\002\000\004\005\u02f5\001\002\000" +
    "\004\002\uffba\001\002\000\004\002\uffa8\001\002\000\004" +
    "\005\u02e3\001\002\000\004\005\u02e1\001\002\000\004\005" +
    "\u02db\001\002\000\004\005\u02d9\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\uffe1\001\002\000\004\002\uffc8\001" +
    "\002\000\030\005\u02be\271\u02c0\272\u02c2\305\u02bf\324\u02bc" +
    "\325\u02b9\326\u02bd\327\u02bb\330\u02c3\331\u02c1\332\u02ba\001" +
    "\002\000\004\005\u02b7\001\002\000\004\002\uffe9\001\002" +
    "\000\004\005\u0299\001\002\000\004\005\u028f\001\002\000" +
    "\004\002\uffcd\001\002\000\004\005\u028d\001\002\000\004" +
    "\005\u0287\001\002\000\004\002\uffc0\001\002\000\004\005" +
    "\u027d\001\002\000\004\002\uffbf\001\002\000\004\002\uffed" +
    "\001\002\000\004\005\u026f\001\002\000\004\002\uffc9\001" +
    "\002\000\004\005\u026d\001\002\000\004\005\u026b\001\002" +
    "\000\004\005\u0269\001\002\000\004\002\uffeb\001\002\000" +
    "\004\002\ufff5\001\002\000\004\005\u0267\001\002\000\004" +
    "\002\uffe5\001\002\000\004\005\u025d\001\002\000\004\002" +
    "\uffff\001\002\000\004\005\u025b\001\002\000\004\005\u0259" +
    "\001\002\000\004\005\u0253\001\002\000\004\002\uffdb\001" +
    "\002\000\004\002\ufff1\001\002\000\004\002\uffdf\001\002" +
    "\000\004\005\u0251\001\002\000\004\005\u024f\001\002\000" +
    "\004\005\u024d\001\002\000\004\005\u024b\001\002\000\004" +
    "\005\u0249\001\002\000\004\005\u0247\001\002\000\004\002" +
    "\uffb0\001\002\000\004\005\u0245\001\002\000\004\002\uffe4" +
    "\001\002\000\004\002\ufff9\001\002\000\004\005\u0243\001" +
    "\002\000\004\002\uffd2\001\002\000\004\002\uffef\001\002" +
    "\000\006\005\u022f\303\u022e\001\002\000\004\002\uffb3\001" +
    "\002\000\004\005\u0218\001\002\000\004\002\uffb5\001\002" +
    "\000\004\002\uffd9\001\002\000\004\005\u0212\001\002\000" +
    "\004\002\uffa9\001\002\000\004\002\uffd8\001\002\000\004" +
    "\002\uffde\001\002\000\006\005\u01fa\275\u01f9\001\002\000" +
    "\004\002\ufffb\001\002\000\004\002\uffb2\001\002\000\004" +
    "\005\u01db\001\002\000\004\002\uffc4\001\002\000\004\005" +
    "\u01d9\001\002\000\004\002\uffcf\001\002\000\004\002\uffe3" +
    "\001\002\000\004\005\u01d3\001\002\000\004\002\uffb8\001" +
    "\002\000\004\005\u01d1\001\002\000\004\002\ufff8\001\002" +
    "\000\004\005\u01cf\001\002\000\004\005\u01cd\001\002\000" +
    "\004\005\u01cb\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffc3\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\uffd1\001\002\000\004\002\uffce\001\002\000\004\002\uffe8" +
    "\001\002\000\006\005\u01c7\275\u01c6\001\002\000\004\002" +
    "\uffda\001\002\000\004\005\u01a0\001\002\000\004\005\u019e" +
    "\001\002\000\004\005\u019c\001\002\000\004\005\u019a\001" +
    "\002\000\004\002\uffe2\001\002\000\004\005\u0194\001\002" +
    "\000\004\002\uffee\001\002\000\004\005\u0192\001\002\000" +
    "\004\002\uffc2\001\002\000\004\005\u0184\001\002\000\004" +
    "\002\uffc1\001\002\000\004\002\uffe6\001\002\000\004\002" +
    "\uffdd\001\002\000\004\005\u0182\001\002\000\004\002\uffbb" +
    "\001\002\000\004\002\uffbc\001\002\000\004\005\u0180\001" +
    "\002\000\006\005\u017c\320\u017b\001\002\000\004\005\u0179" +
    "\001\002\000\004\002\uffc7\001\002\000\004\002\uffe7\001" +
    "\002\000\004\005\u0177\001\002\000\004\005\u016d\001\002" +
    "\000\004\005\u016b\001\002\000\004\002\uffb7\001\002\000" +
    "\004\005\u0169\001\002\000\004\005\u0167\001\002\000\004" +
    "\005\u0165\001\002\000\004\005\u0163\001\002\000\004\005" +
    "\u0161\001\002\000\004\002\uffe0\001\002\000\004\005\u015f" +
    "\001\002\000\004\005\u015d\001\002\000\020\005\u014b\307" +
    "\u014e\310\u0149\311\u014c\312\u014f\313\u014a\314\u014d\001\002" +
    "\000\004\002\000\001\002\000\004\005\u0147\001\002\000" +
    "\004\002\uffcc\001\002\000\004\002\uffac\001\002\000\004" +
    "\002\uffc6\001\002\000\004\005\u0145\001\002\000\004\005" +
    "\u013f\001\002\000\004\005\u0131\001\002\000\004\005\u012b" +
    "\001\002\000\004\002\ufffa\001\002\000\004\005\u011d\001" +
    "\002\000\004\002\ufff6\001\002\000\004\005\u011b\001\002" +
    "\000\004\002\ufff2\001\002\000\004\005\u0119\001\002\000" +
    "\004\002\uffec\001\002\000\004\002\uffd5\001\002\000\004" +
    "\002\uffea\001\002\000\004\005\u0117\001\002\000\004\005" +
    "\u010d\001\002\000\004\002\uffd4\001\002\000\004\005\377" +
    "\001\002\000\004\005\375\001\002\000\004\002\uffb1\001" +
    "\002\000\004\005\373\001\002\000\004\005\371\001\002" +
    "\000\004\002\uffad\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\uffaa\001\002\000\004\005\367\001\002\000\004" +
    "\005\365\001\002\000\004\002\uffd3\001\002\000\004\002" +
    "\uffc5\001\002\000\004\002\ufff0\001\002\000\004\002\uffbe" +
    "\001\002\000\004\002\uffb4\001\002\000\004\002\uffb6\001" +
    "\002\000\004\002\uffca\001\002\000\004\002\uffab\001\002" +
    "\000\004\002\uffd7\001\002\000\004\005\357\001\002\000" +
    "\004\005\351\001\002\000\006\005\345\317\344\001\002" +
    "\000\004\005\342\001\002\000\004\005\340\001\002\000" +
    "\004\002\uffb9\001\002\000\004\002\uffd0\001\002\000\004" +
    "\002\uffae\001\002\000\004\005\302\001\002\000\004\002" +
    "\uffa7\001\002\000\004\005\300\001\002\000\004\002\uff37" +
    "\001\002\000\004\005\276\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\uffdc\001\002\000\004\005\274\001\002" +
    "\000\004\002\273\001\002\000\004\002\uffbd\001\002\000" +
    "\004\005\271\001\002\000\004\002\uffaf\001\002\000\004" +
    "\002\uffcb\001\002\000\004\002\ufff3\001\002\000\004\002" +
    "\uffd6\001\002\000\004\123\272\001\002\000\004\002\uff8b" +
    "\001\002\000\004\002\001\001\002\000\004\057\275\001" +
    "\002\000\004\002\uff89\001\002\000\004\033\277\001\002" +
    "\000\004\002\uff7f\001\002\000\004\055\301\001\002\000" +
    "\004\002\uff8a\001\002\000\004\217\303\001\002\000\004" +
    "\216\304\001\002\000\004\272\305\001\002\000\004\005" +
    "\306\001\002\000\004\217\307\001\002\000\004\216\310" +
    "\001\002\000\004\350\311\001\002\000\004\005\312\001" +
    "\002\000\004\217\313\001\002\000\004\216\314\001\002" +
    "\000\004\351\315\001\002\000\004\005\316\001\002\000" +
    "\004\217\317\001\002\000\004\216\320\001\002\000\004" +
    "\352\321\001\002\000\004\005\322\001\002\000\004\217" +
    "\323\001\002\000\004\216\324\001\002\000\004\271\325" +
    "\001\002\000\004\005\326\001\002\000\004\217\327\001" +
    "\002\000\004\216\330\001\002\000\004\325\331\001\002" +
    "\000\004\005\332\001\002\000\004\217\333\001\002\000" +
    "\004\216\334\001\002\000\004\353\335\001\002\000\004" +
    "\005\336\001\002\000\004\217\337\001\002\000\004\002" +
    "\uff3b\001\002\000\004\121\341\001\002\000\004\002\uff8c" +
    "\001\002\000\004\131\343\001\002\000\004\002\uff86\001" +
    "\002\000\004\005\347\001\002\000\004\171\346\001\002" +
    "\000\004\002\uff6f\001\002\000\004\171\350\001\002\000" +
    "\004\002\uff6e\001\002\000\004\257\352\001\002\000\004" +
    "\256\353\001\002\000\004\272\354\001\002\000\004\005" +
    "\355\001\002\000\004\257\356\001\002\000\004\002\uff5c" +
    "\001\002\000\004\245\360\001\002\000\004\244\361\001" +
    "\002\000\004\337\362\001\002\000\004\005\363\001\002" +
    "\000\004\245\364\001\002\000\004\002\uff49\001\002\000" +
    "\004\143\366\001\002\000\004\002\uff75\001\002\000\004" +
    "\117\370\001\002\000\004\002\uff8d\001\002\000\004\031" +
    "\372\001\002\000\004\002\uff8f\001\002\000\004\155\374" +
    "\001\002\000\004\002\uff9d\001\002\000\004\133\376\001" +
    "\002\000\004\002\uff85\001\002\000\004\233\u0100\001\002" +
    "\000\004\232\u0101\001\002\000\004\321\u0102\001\002\000" +
    "\004\005\u0103\001\002\000\004\233\u0104\001\002\000\004" +
    "\232\u0105\001\002\000\004\323\u0106\001\002\000\004\005" +
    "\u0107\001\002\000\004\233\u0108\001\002\000\004\232\u0109" +
    "\001\002\000\004\322\u010a\001\002\000\004\005\u010b\001" +
    "\002\000\004\233\u010c\001\002\000\004\002\uff59\001\002" +
    "\000\004\231\u010e\001\002\000\004\230\u010f\001\002\000" +
    "\004\270\u0110\001\002\000\004\005\u0111\001\002\000\004" +
    "\231\u0112\001\002\000\004\230\u0113\001\002\000\004\316" +
    "\u0114\001\002\000\004\005\u0115\001\002\000\004\231\u0116" +
    "\001\002\000\004\002\uff5a\001\002\000\004\051\u0118\001" +
    "\002\000\004\002\uff81\001\002\000\004\063\u011a\001\002" +
    "\000\004\002\uff87\001\002\000\004\041\u011c\001\002\000" +
    "\004\002\uff7a\001\002\000\004\207\u011e\001\002\000\004" +
    "\206\u011f\001\002\000\004\274\u0120\001\002\000\004\005" +
    "\u0121\001\002\000\004\207\u0122\001\002\000\004\206\u0123" +
    "\001\002\000\004\270\u0124\001\002\000\004\005\u0125\001" +
    "\002\000\004\207\u0126\001\002\000\004\206\u0127\001\002" +
    "\000\004\345\u0128\001\002\000\004\005\u0129\001\002\000" +
    "\004\207\u012a\001\002\000\004\002\uff3f\001\002\000\004" +
    "\227\u012c\001\002\000\004\226\u012d\001\002\000\004\317" +
    "\u012e\001\002\000\004\005\u012f\001\002\000\004\227\u0130" +
    "\001\002\000\004\002\uff5b\001\002\000\004\215\u0132\001" +
    "\002\000\004\214\u0133\001\002\000\004\274\u0134\001\002" +
    "\000\004\005\u0135\001\002\000\004\215\u0136\001\002\000" +
    "\004\214\u0137\001\002\000\004\354\u0138\001\002\000\004" +
    "\005\u0139\001\002\000\004\215\u013a\001\002\000\004\214" +
    "\u013b\001\002\000\004\355\u013c\001\002\000\004\005\u013d" +
    "\001\002\000\004\215\u013e\001\002\000\004\002\uff3c\001" +
    "\002\000\004\205\u0140\001\002\000\004\204\u0141\001\002" +
    "\000\004\271\u0142\001\002\000\004\005\u0143\001\002\000" +
    "\004\205\u0144\001\002\000\004\002\uff40\001\002\000\004" +
    "\073\u0146\001\002\000\004\002\uff93\001\002\000\004\035" +
    "\u0148\001\002\000\004\002\uff98\001\002\000\004\005\u015b" +
    "\001\002\000\004\005\u0159\001\002\000\004\255\u0158\001" +
    "\002\000\004\005\u0156\001\002\000\004\005\u0154\001\002" +
    "\000\004\005\u0152\001\002\000\004\005\u0150\001\002\000" +
    "\004\255\u0151\001\002\000\004\002\uff63\001\002\000\004" +
    "\255\u0153\001\002\000\004\002\uff66\001\002\000\004\255" +
    "\u0155\001\002\000\004\002\uff61\001\002\000\004\255\u0157" +
    "\001\002\000\004\002\uff64\001\002\000\004\002\uff67\001" +
    "\002\000\004\255\u015a\001\002\000\004\002\uff62\001\002" +
    "\000\004\255\u015c\001\002\000\004\002\uff65\001\002\000" +
    "\004\045\u015e\001\002\000\004\002\uff72\001\002\000\004" +
    "\103\u0160\001\002\000\004\002\uff7b\001\002\000\004\175" +
    "\u0162\001\002\000\004\002\uff44\001\002\000\004\251\u0164" +
    "\001\002\000\004\002\uff95\001\002\000\004\077\u0166\001" +
    "\002\000\004\002\uff7d\001\002\000\004\137\u0168\001\002" +
    "\000\004\002\uff83\001\002\000\004\225\u016a\001\002\000" +
    "\004\002\uff76\001\002\000\004\027\u016c\001\002\000\004" +
    "\002\uff9b\001\002\000\004\163\u016e\001\002\000\004\162" +
    "\u016f\001\002\000\004\270\u0170\001\002\000\004\005\u0171" +
    "\001\002\000\004\163\u0172\001\002\000\004\162\u0173\001" +
    "\002\000\004\334\u0174\001\002\000\004\005\u0175\001\002" +
    "\000\004\163\u0176\001\002\000\004\002\uff48\001\002\000" +
    "\004\043\u0178\001\002\000\004\002\uff71\001\002\000\004" +
    "\161\u017a\001\002\000\004\002\uff73\001\002\000\004\005" +
    "\u017e\001\002\000\004\011\u017d\001\002\000\004\002\uff60" +
    "\001\002\000\004\011\u017f\001\002\000\004\002\uff5f\001" +
    "\002\000\004\153\u0181\001\002\000\004\002\uff9e\001\002" +
    "\000\004\127\u0183\001\002\000\004\002\uff92\001\002\000" +
    "\004\177\u0185\001\002\000\004\176\u0186\001\002\000\004" +
    "\333\u0187\001\002\000\004\005\u0188\001\002\000\004\177" +
    "\u0189\001\002\000\004\176\u018a\001\002\000\004\343\u018b" +
    "\001\002\000\004\005\u018c\001\002\000\004\177\u018d\001" +
    "\002\000\004\176\u018e\001\002\000\004\317\u018f\001\002" +
    "\000\004\005\u0190\001\002\000\004\177\u0191\001\002\000" +
    "\004\002\uff43\001\002\000\004\071\u0193\001\002\000\004" +
    "\002\uff94\001\002\000\004\253\u0195\001\002\000\004\252" +
    "\u0196\001\002\000\004\270\u0197\001\002\000\004\005\u0198" +
    "\001\002\000\004\253\u0199\001\002\000\004\002\uff38\001" +
    "\002\000\004\125\u019b\001\002\000\004\002\uff9a\001\002" +
    "\000\004\115\u019d\001\002\000\004\002\uff90\001\002\000" +
    "\004\141\u019f\001\002\000\004\002\uff82\001\002\000\004" +
    "\243\u01a1\001\002\000\004\242\u01a2\001\002\000\004\333" +
    "\u01a3\001\002\000\004\005\u01a4\001\002\000\004\243\u01a5" +
    "\001\002\000\004\242\u01a6\001\002\000\004\274\u01a7\001" +
    "\002\000\004\005\u01a8\001\002\000\004\243\u01a9\001\002" +
    "\000\004\242\u01aa\001\002\000\004\270\u01ab\001\002\000" +
    "\004\005\u01ac\001\002\000\004\243\u01ad\001\002\000\004" +
    "\242\u01ae\001\002\000\004\274\u01af\001\002\000\004\005" +
    "\u01b0\001\002\000\004\243\u01b1\001\002\000\004\242\u01b2" +
    "\001\002\000\004\335\u01b3\001\002\000\004\005\u01b4\001" +
    "\002\000\004\243\u01b5\001\002\000\004\242\u01b6\001\002" +
    "\000\004\334\u01b7\001\002\000\004\005\u01b8\001\002\000" +
    "\004\243\u01b9\001\002\000\004\242\u01ba\001\002\000\004" +
    "\336\u01bb\001\002\000\004\005\u01bc\001\002\000\004\243" +
    "\u01bd\001\002\000\004\242\u01be\001\002\000\004\324\u01bf" +
    "\001\002\000\004\005\u01c0\001\002\000\004\243\u01c1\001" +
    "\002\000\004\242\u01c2\001\002\000\004\272\u01c3\001\002" +
    "\000\004\005\u01c4\001\002\000\004\243\u01c5\001\002\000" +
    "\004\002\uff4a\001\002\000\004\005\u01c9\001\002\000\004" +
    "\265\u01c8\001\002\000\004\002\uff69\001\002\000\004\265" +
    "\u01ca\001\002\000\004\002\uff68\001\002\000\004\067\u01cc" +
    "\001\002\000\004\002\uff97\001\002\000\004\111\u01ce\001" +
    "\002\000\004\002\uff77\001\002\000\004\145\u01d0\001\002" +
    "\000\004\002\uff74\001\002\000\004\017\u01d2\001\002\000" +
    "\004\002\uffa4\001\002\000\004\237\u01d4\001\002\000\004" +
    "\236\u01d5\001\002\000\004\315\u01d6\001\002\000\004\005" +
    "\u01d7\001\002\000\004\237\u01d8\001\002\000\004\002\uff56" +
    "\001\002\000\004\107\u01da\001\002\000\004\002\uff78\001" +
    "\002\000\004\165\u01dc\001\002\000\004\164\u01dd\001\002" +
    "\000\004\275\u01de\001\002\000\004\005\u01df\001\002\000" +
    "\004\165\u01e0\001\002\000\004\164\u01e1\001\002\000\004" +
    "\276\u01e2\001\002\000\004\005\u01e3\001\002\000\004\165" +
    "\u01e4\001\002\000\004\164\u01e5\001\002\000\004\277\u01e6" +
    "\001\002\000\004\005\u01e7\001\002\000\004\165\u01e8\001" +
    "\002\000\004\164\u01e9\001\002\000\004\301\u01ea\001\002" +
    "\000\004\005\u01eb\001\002\000\004\165\u01ec\001\002\000" +
    "\004\164\u01ed\001\002\000\004\302\u01ee\001\002\000\004" +
    "\005\u01ef\001\002\000\004\165\u01f0\001\002\000\004\164" +
    "\u01f1\001\002\000\004\300\u01f2\001\002\000\004\005\u01f3" +
    "\001\002\000\004\165\u01f4\001\002\000\004\164\u01f5\001" +
    "\002\000\004\340\u01f6\001\002\000\004\005\u01f7\001\002" +
    "\000\004\165\u01f8\001\002\000\004\002\uff47\001\002\000" +
    "\004\005\u01fc\001\002\000\004\261\u01fb\001\002\000\004" +
    "\002\uff6d\001\002\000\004\261\u01fd\001\002\000\004\260" +
    "\u01fe\001\002\000\004\276\u01ff\001\002\000\004\005\u0200" +
    "\001\002\000\004\261\u0201\001\002\000\004\260\u0202\001" +
    "\002\000\004\277\u0203\001\002\000\004\005\u0204\001\002" +
    "\000\004\261\u0205\001\002\000\004\260\u0206\001\002\000" +
    "\004\300\u0207\001\002\000\004\005\u0208\001\002\000\004" +
    "\261\u0209\001\002\000\004\260\u020a\001\002\000\004\301" +
    "\u020b\001\002\000\004\005\u020c\001\002\000\004\261\u020d" +
    "\001\002\000\004\260\u020e\001\002\000\004\302\u020f\001" +
    "\002\000\004\005\u0210\001\002\000\004\261\u0211\001\002" +
    "\000\004\002\uff6c\001\002\000\004\167\u0213\001\002\000" +
    "\004\166\u0214\001\002\000\004\274\u0215\001\002\000\004" +
    "\005\u0216\001\002\000\004\167\u0217\001\002\000\004\002" +
    "\uff46\001\002\000\004\211\u0219\001\002\000\004\210\u021a" +
    "\001\002\000\004\272\u021b\001\002\000\004\005\u021c\001" +
    "\002\000\004\211\u021d\001\002\000\004\210\u021e\001\002" +
    "\000\004\330\u021f\001\002\000\004\005\u0220\001\002\000" +
    "\004\211\u0221\001\002\000\004\210\u0222\001\002\000\004" +
    "\271\u0223\001\002\000\004\005\u0224\001\002\000\004\211" +
    "\u0225\001\002\000\004\210\u0226\001\002\000\004\346\u0227" +
    "\001\002\000\004\005\u0228\001\002\000\004\211\u0229\001" +
    "\002\000\004\210\u022a\001\002\000\004\347\u022b\001\002" +
    "\000\004\005\u022c\001\002\000\004\211\u022d\001\002\000" +
    "\004\002\uff3e\001\002\000\004\005\u0231\001\002\000\004" +
    "\263\u0230\001\002\000\004\002\uff6b\001\002\000\004\263" +
    "\u0232\001\002\000\004\262\u0233\001\002\000\004\304\u0234" +
    "\001\002\000\004\005\u0235\001\002\000\004\263\u0236\001" +
    "\002\000\004\262\u0237\001\002\000\004\275\u0238\001\002" +
    "\000\004\005\u0239\001\002\000\004\263\u023a\001\002\000" +
    "\004\262\u023b\001\002\000\004\305\u023c\001\002\000\004" +
    "\005\u023d\001\002\000\004\263\u023e\001\002\000\004\262" +
    "\u023f\001\002\000\004\306\u0240\001\002\000\004\005\u0241" +
    "\001\002\000\004\263\u0242\001\002\000\004\002\uff6a\001" +
    "\002\000\004\157\u0244\001\002\000\004\002\uff9c\001\002" +
    "\000\004\047\u0246\001\002\000\004\002\uff80\001\002\000" +
    "\004\105\u0248\001\002\000\004\002\uff79\001\002\000\004" +
    "\075\u024a\001\002\000\004\002\uff7e\001\002\000\004\061" +
    "\u024c\001\002\000\004\002\uff88\001\002\000\004\037\u024e" +
    "\001\002\000\004\002\uff70\001\002\000\004\247\u0250\001" +
    "\002\000\004\002\uff96\001\002\000\004\021\u0252\001\002" +
    "\000\004\002\uffa3\001\002\000\004\235\u0254\001\002\000" +
    "\004\234\u0255\001\002\000\004\272\u0256\001\002\000\004" +
    "\005\u0257\001\002\000\004\235\u0258\001\002\000\004\002" +
    "\uff58\001\002\000\004\025\u025a\001\002\000\004\002\uffa0" +
    "\001\002\000\004\113\u025c\001\002\000\004\002\uff91\001" +
    "\002\000\004\221\u025e\001\002\000\004\220\u025f\001\002" +
    "\000\004\272\u0260\001\002\000\004\005\u0261\001\002\000" +
    "\004\221\u0262\001\002\000\004\220\u0263\001\002\000\004" +
    "\350\u0264\001\002\000\004\005\u0265\001\002\000\004\221" +
    "\u0266\001\002\000\004\002\uff3a\001\002\000\004\101\u0268" +
    "\001\002\000\004\002\uff7c\001\002\000\004\013\u026a\001" +
    "\002\000\004\002\uffa6\001\002\000\004\135\u026c\001\002" +
    "\000\004\002\uff84\001\002\000\004\147\u026e\001\002\000" +
    "\004\002\uffa1\001\002\000\004\173\u0270\001\002\000\004" +
    "\172\u0271\001\002\000\004\274\u0272\001\002\000\004\005" +
    "\u0273\001\002\000\004\173\u0274\001\002\000\004\172\u0275" +
    "\001\002\000\004\342\u0276\001\002\000\004\005\u0277\001" +
    "\002\000\004\173\u0278\001\002\000\004\172\u0279\001\002" +
    "\000\004\341\u027a\001\002\000\004\005\u027b\001\002\000" +
    "\004\173\u027c\001\002\000\004\002\uff45\001\002\000\004" +
    "\201\u027e\001\002\000\004\200\u027f\001\002\000\004\344" +
    "\u0280\001\002\000\004\005\u0281\001\002\000\004\201\u0282" +
    "\001\002\000\004\200\u0283\001\002\000\004\334\u0284\001" +
    "\002\000\004\005\u0285\001\002\000\004\201\u0286\001\002" +
    "\000\004\002\uff42\001\002\000\004\203\u0288\001\002\000" +
    "\004\202\u0289\001\002\000\004\271\u028a\001\002\000\004" +
    "\005\u028b\001\002\000\004\203\u028c\001\002\000\004\002" +
    "\uff41\001\002\000\004\151\u028e\001\002\000\004\002\uff9f" +
    "\001\002\000\004\223\u0290\001\002\000\004\222\u0291\001" +
    "\002\000\004\333\u0292\001\002\000\004\005\u0293\001\002" +
    "\000\004\223\u0294\001\002\000\004\222\u0295\001\002\000" +
    "\004\317\u0296\001\002\000\004\005\u0297\001\002\000\004" +
    "\223\u0298\001\002\000\004\002\uff39\001\002\000\004\213" +
    "\u029a\001\002\000\004\212\u029b\001\002\000\004\272\u029c" +
    "\001\002\000\004\005\u029d\001\002\000\004\213\u029e\001" +
    "\002\000\004\212\u029f\001\002\000\004\350\u02a0\001\002" +
    "\000\004\005\u02a1\001\002\000\004\213\u02a2\001\002\000" +
    "\004\212\u02a3\001\002\000\004\351\u02a4\001\002\000\004" +
    "\005\u02a5\001\002\000\004\213\u02a6\001\002\000\004\212" +
    "\u02a7\001\002\000\004\352\u02a8\001\002\000\004\005\u02a9" +
    "\001\002\000\004\213\u02aa\001\002\000\004\212\u02ab\001" +
    "\002\000\004\271\u02ac\001\002\000\004\005\u02ad\001\002" +
    "\000\004\213\u02ae\001\002\000\004\212\u02af\001\002\000" +
    "\004\325\u02b0\001\002\000\004\005\u02b1\001\002\000\004" +
    "\213\u02b2\001\002\000\004\212\u02b3\001\002\000\004\353" +
    "\u02b4\001\002\000\004\005\u02b5\001\002\000\004\213\u02b6" +
    "\001\002\000\004\002\uff3d\001\002\000\004\053\u02b8\001" +
    "\002\000\004\002\uff8e\001\002\000\004\005\u02d7\001\002" +
    "\000\004\005\u02d5\001\002\000\004\005\u02d3\001\002\000" +
    "\004\005\u02d1\001\002\000\004\005\u02cf\001\002\000\004" +
    "\241\u02ce\001\002\000\004\005\u02cc\001\002\000\004\005" +
    "\u02ca\001\002\000\004\005\u02c8\001\002\000\004\005\u02c6" +
    "\001\002\000\004\005\u02c4\001\002\000\004\241\u02c5\001" +
    "\002\000\004\002\uff4d\001\002\000\004\241\u02c7\001\002" +
    "\000\004\002\uff53\001\002\000\004\241\u02c9\001\002\000" +
    "\004\002\uff4c\001\002\000\004\241\u02cb\001\002\000\004" +
    "\002\uff52\001\002\000\004\241\u02cd\001\002\000\004\002" +
    "\uff4e\001\002\000\004\002\uff55\001\002\000\004\241\u02d0" +
    "\001\002\000\004\002\uff50\001\002\000\004\241\u02d2\001" +
    "\002\000\004\002\uff54\001\002\000\004\241\u02d4\001\002" +
    "\000\004\002\uff4f\001\002\000\004\241\u02d6\001\002\000" +
    "\004\002\uff4b\001\002\000\004\241\u02d8\001\002\000\004" +
    "\002\uff51\001\002\000\004\023\u02da\001\002\000\004\002" +
    "\uffa2\001\002\000\004\267\u02dc\001\002\000\004\266\u02dd" +
    "\001\002\000\004\317\u02de\001\002\000\004\005\u02df\001" +
    "\002\000\004\267\u02e0\001\002\000\004\002\uff5d\001\002" +
    "\000\004\065\u02e2\001\002\000\004\002\uff99\001\002\000" +
    "\004\007\u02e4\001\002\000\004\006\u02e5\001\002\000\004" +
    "\272\u02e6\001\002\000\004\005\u02e7\001\002\000\004\007" +
    "\u02e8\001\002\000\004\006\u02e9\001\002\000\004\270\u02ea" +
    "\001\002\000\004\005\u02eb\001\002\000\004\007\u02ec\001" +
    "\002\000\004\006\u02ed\001\002\000\004\271\u02ee\001\002" +
    "\000\004\005\u02ef\001\002\000\004\007\u02f0\001\002\000" +
    "\004\006\u02f1\001\002\000\004\273\u02f2\001\002\000\004" +
    "\005\u02f3\001\002\000\004\007\u02f4\001\002\000\004\002" +
    "\uff57\001\002\000\004\015\u02f6\001\002\000\004\002\uffa5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02f4\000\270\002\117\003\256\004\121\005\101\006" +
    "\202\007\043\010\171\011\063\012\113\013\012\014\204" +
    "\015\037\016\236\017\224\020\266\021\206\022\050\023" +
    "\232\024\066\025\135\026\030\027\210\030\265\031\036" +
    "\032\212\033\017\034\124\035\153\036\142\037\041\040" +
    "\062\041\107\042\133\043\013\044\165\045\051\046\077" +
    "\047\143\050\257\051\047\052\126\053\073\054\076\055" +
    "\240\056\267\057\211\060\215\061\230\062\065\063\122" +
    "\064\247\065\106\066\123\067\022\070\173\071\032\072" +
    "\014\073\152\074\175\075\231\076\104\077\120\100\137" +
    "\101\141\102\025\103\027\104\233\105\262\106\146\107" +
    "\145\110\004\111\246\112\111\113\157\114\235\115\072" +
    "\116\234\117\070\120\102\121\220\122\060\123\264\124" +
    "\250\125\223\126\174\127\237\130\225\131\075\132\005" +
    "\133\252\134\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ERROR_S ::= ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERROR_S",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // BASEFONT_TAG ::= BasefontOpen Content BasefontClose BasefontOpen SizeAttr Content BasefontClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BASEFONT_TAG",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // UL_TAG ::= UlOpen Content UlClose UlOpen TypeAttr Content UlClose UlOpen CompactAttr Content UlClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UL_TAG",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TR_TAG ::= TrOpen Content TrClose TrOpen AlignAttr Content TrClose TrOpen ValignAttr Content TrClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TR_TAG",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TH_TAG ::= ThOpen Content ThClose ThOpen AlignAttr Content ThClose ThOpen ValignAttr Content ThClose ThOpen RowspanAttr Content ThClose ThOpen ColspanAttr Content ThClose ThOpen WidthAttr Content ThClose ThOpen HeightAttr Content ThClose ThOpen NowrapAttr Content ThClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TH_TAG",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-30)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TEXTAREA_TAG ::= TextareaOpen Content TextareaClose TextareaOpen NameAttr Content TextareaClose TextareaOpen RowsAttr Content TextareaClose TextareaOpen ColsAttr Content TextareaClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTAREA_TAG",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TD_TAG ::= TdOpen Content TdClose TdOpen AlignAttr Content TdClose TdOpen ValignAttr Content TdClose TdOpen RowspanAttr Content TdClose TdOpen ColspanAttr Content TdClose TdOpen WidthAttr Content TdClose TdOpen HeightAttr Content TdClose TdOpen NowrapAttr Content TdClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TD_TAG",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-30)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TABLE_TAG ::= TableOpen Content TableClose TableOpen AlignAttr Content TableClose TableOpen BorderAttr Content TableClose TableOpen WidthAttr Content TableClose TableOpen CellspacingAttr Content TableClose TableOpen CellpaddingAttr Content TableClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE_TAG",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-22)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // SELECT_TAG ::= SelectOpen Content SelectClose SelectOpen NameAttr Content SelectClose SelectOpen SizeAttr Content SelectClose SelectOpen MultipleAttr Content SelectClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECT_TAG",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PRE_TAG ::= PreOpen Content PreClose PreOpen WidthAttr Content PreClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRE_TAG",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // P_TAG ::= POpen Content PClose POpen WidthAttr Content PClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("P_TAG",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OPTION_TAG ::= OptionOpen Content OptionClose OptionOpen SelectedAttr Content OptionClose OptionOpen ValueAttr Content OptionClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION_TAG",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OL_TAG ::= OlOpen Content OlClose OlOpen TypeAttr Content OlClose OlOpen StartAttr Content OlClose OlOpen CompactAttr Content OlClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OL_TAG",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NEXTID_TAG ::= NextidOpen Content NextidClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NEXTID_TAG",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // META_TAG ::= MetaOpen Content MetaClose MetaOpen NameAttr Content MetaClose MetaOpen ContentAttr Content MetaClose MetaOpen HttpEquivAttr Content MetaClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("META_TAG",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // MAP_TAG ::= MapOpen Content MapClose MapOpen NameAttr Content MapClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAP_TAG",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // LINK_TAG ::= LinkOpen Content LinkClose LinkOpen HrefAttr Content LinkClose LinkOpen RelAttr Content LinkClose LinkOpen RevAttr Content LinkClose LinkOpen UrnAttr Content LinkClose LinkOpen MethodsAttr Content LinkClose LinkOpen TitleAttr Content LinkClose LinkOpen IdAttr Content LinkClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LINK_TAG",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-30)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // LI_TAG ::= LiOpen Content LiClose LiOpen SizeAttr Content LiClose LiOpen ValueAttr Content LiClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LI_TAG",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ISINDEX_TAG ::= IsindexOpen Content IsindexClose IsindexOpen PromptAttr Content IsindexClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ISINDEX_TAG",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INPUT_TAG ::= InputOpen Content InputClose InputOpen TypeAttr Content InputClose InputOpen NameAttr Content InputClose InputOpen SizeAttr Content InputClose InputOpen NameAttr Content InputClose InputOpen MaxlengthAttr Content InputClose InputOpen ValueAttr Content InputClose InputOpen CheckedAttr Content InputClose InputOpen SrcAttr Content InputClose InputOpen AlignAttr Content InputClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INPUT_TAG",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-38)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IMG_TAG ::= ImgOpen IsmapAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IMG_TAG ::= ImgOpen UsemapAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IMG_TAG ::= ImgOpen BorderAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IMG_TAG ::= ImgOpen AltAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // IMG_TAG ::= ImgOpen VspaceAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // IMG_TAG ::= ImgOpen HspaceAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // IMG_TAG ::= ImgOpen HeightAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // IMG_TAG ::= ImgOpen WidthAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // IMG_TAG ::= ImgOpen AlignAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // IMG_TAG ::= ImgOpen SrcAttr Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // IMG_TAG ::= ImgOpen Content ImgClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMG_TAG",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // HTML_TAG ::= HtmlOpen Content HtmlClose HtmlOpen VersionAttr Content HtmlClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HTML_TAG",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // HR_TAG ::= HrOpen Content HrClose HrOpen AlignAttr Content HrClose HrOpen SizeAttr Content HrClose HrOpen WidthAttr Content HrClose HrOpen NoshadeAttr Content HrClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HR_TAG",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // HN_TAG ::= HnOpen Content HnClose HnOpen AlignAttr Content HnClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HN_TAG",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // FORM_TAG ::= FormOpen Content FormClose FormOpen ActionAttr Content FormClose FormOpen MethodAttr Content FormClose FormOpen EnctypeAttr Content FormClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORM_TAG",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // FONT_TAG ::= FontOpen Content FontClose FontOpen SizeAttr Content FontClose FontOpen ColorAttr Content FontClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FONT_TAG",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DL_TAG ::= DlOpen Content DlClose DlOpen CompactAttr Content DlClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DL_TAG",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DIV_TAG ::= DivOpen Content DivClose DivOpen AlignAttr Content DivClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIV_TAG",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DIR_TAG ::= DirOpen Content DirClose DirOpen CompactAttr Content DirClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIR_TAG",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // BR_TAG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BR_TAG",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // BR_TAG ::= BrOpen ClearAttr Content BrClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BR_TAG",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // BR_TAG ::= BrOpen Content BrClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BR_TAG",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // BODY_TAG ::= BodyOpen AlinkAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // BODY_TAG ::= BodyOpen VlinkAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BODY_TAG ::= BodyOpen LinkAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // BODY_TAG ::= BodyOpen TextAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BODY_TAG ::= BodyOpen BackgroundAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BODY_TAG ::= BodyOpen BgcolorAttr Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // BODY_TAG ::= BodyOpen Content BodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY_TAG",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BASE_TAG ::= BaseOpen HrefAttr Content BaseClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BASE_TAG",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // BASE_TAG ::= BaseOpen Content BaseClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BASE_TAG",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AREA_TAG ::= AreaOpen ShapeAttr Content AreaClose AreaOpen CoordsAttr Content AreaClose AreaOpen HrefAttr Content AreaClose AreaOpen AltAttr Content AreaClose AreaOpen NohrefAttr Content AreaClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AREA_TAG",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-19)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AREA_TAG ::= AreaOpen Content AreaClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AREA_TAG",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // A_TAG ::= AOpen HrefAttr Content AClose AOpen RelAttr Content AClose AOpen RevAttr Content AClose AOpen TitleAttr Content AClose AOpen UrnAttr Content AClose AOpen MethodsAttr Content AClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_TAG",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // A_TAG ::= AOpen Content AClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("A_TAG",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MENU_TAG ::= MenuOpen CompactAttr Content MenuClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENU_TAG",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MENU_TAG ::= MenuOpen Content MenuClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MENU_TAG",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // XMP_TAG ::= XmpOpen Content XmpClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("XMP_TAG",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VAR_TAG ::= VarOpen Content VarClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_TAG",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // U_TAG ::= UOpen Content UClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("U_TAG",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TT_TAG ::= TtOpen Content TtClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TT_TAG",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TITLE_TAG ::= TitleOpen Content TitleClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITLE_TAG",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // THEAD_TAG ::= TheadOpen Content TheadClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("THEAD_TAG",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TBODY_TAG ::= TbodyOpen Content TbodyClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TBODY_TAG",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SUP_TAG ::= SupOpen Content SupClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUP_TAG",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SUB_TAG ::= SubOpen Content SubClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUB_TAG",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // STYLE_TAG ::= StyleOpen Content StyleClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STYLE_TAG",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // STRONG_TAG ::= StrongOpen Content StrongClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRONG_TAG",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // STRIKE_TAG ::= StrikeOpen Content StrikeClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRIKE_TAG",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SPAN_TAG ::= SpanOpen Content SpanClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SPAN_TAG",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SMALL_TAG ::= SmallOpen Content SmallClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SMALL_TAG",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SCRIPT_TAG ::= ScriptOpen Content ScriptClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCRIPT_TAG",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SAMP_TAG ::= SampOpen Content SampClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SAMP_TAG",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // S_TAG ::= SOpen Content SClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TAG",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Q_TAG ::= QOpen Content QClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Q_TAG",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PLAINTEXT_TAG ::= PlaintextOpen Content PlaintextClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLAINTEXT_TAG",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAM_TAG ::= ParamOpen Content ParamClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM_TAG",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPTGROUP_TAG ::= OptgroupOpen Content OptgroupClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTGROUP_TAG",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OBJECT_TAG ::= ObjectOpen Content ObjectClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJECT_TAG",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NOSCRIPT_TAG ::= NoscriptOpen Content NoscriptClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOSCRIPT_TAG",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NOFRAMES_TAG ::= NoframesOpen Content NoframesClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOFRAMES_TAG",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LISTING_TAG ::= ListingOpen Content ListingClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTING_TAG",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LEGEND_TAG ::= LegendOpen Content LegendClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEGEND_TAG",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LABEL_TAG ::= LabelOpen Content LabelClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LABEL_TAG",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // KBD_TAG ::= KbdOpen Content KbdClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("KBD_TAG",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INS_TAG ::= InsOpen Content InsClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INS_TAG",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IFRAME_TAG ::= IframeOpen Content IframeClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFRAME_TAG",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // I_TAG ::= IOpen Content IClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("I_TAG",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // HEAD_TAG ::= HeadOpen Content HeadClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HEAD_TAG",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FRAMESET_TAG ::= FramesetOpen Content FramesetClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRAMESET_TAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FRAME_TAG ::= FrameOpen Content FrameClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FRAME_TAG",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FIELDSET_TAG ::= FieldsetOpen Content FieldsetClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIELDSET_TAG",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EM_TAG ::= EmOpen Content EmClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EM_TAG",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DT_TAG ::= DtOpen Content DtClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DT_TAG",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BDO_TAG ::= BdoOpen Content BdoClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BDO_TAG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BIG_TAG ::= BigOpen Content BigClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIG_TAG",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DFN_TAG ::= DfnOpen Content DfnClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DFN_TAG",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DEL_TAG ::= DelOpen Content DelClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEL_TAG",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DD_TAG ::= DdOpen Content DdClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DD_TAG",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COLGROUP_TAG ::= ColgroupOpen Content ColgroupClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLGROUP_TAG",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CODE_TAG ::= CodeOpen Content CodeClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODE_TAG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COL_TAG ::= ColOpen Content ColClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COL_TAG",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CITE_TAG ::= CiteOpen Content CiteClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CITE_TAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CENTER_TAG ::= CenterOpen Content CenterClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CENTER_TAG",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAPTION_TAG ::= CaptionOpen Content CaptionClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAPTION_TAG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BUTTON_TAG ::= ButtonOpen Content ButtonClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BUTTON_TAG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BLOCKQUOTE_TAG ::= BlockquoteOpen Content BlockquoteClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOCKQUOTE_TAG",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // B_TAG ::= BOpen Content BClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_TAG",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // APPLET_TAG ::= AppletOpen Content AppletClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("APPLET_TAG",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ADDRESS_TAG ::= AddressOpen Content AddressClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS_TAG",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ACRONYM_TAG ::= AcronymOpen Content AcronymClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACRONYM_TAG",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ABBR_TAG ::= AbbrOpen Content AbbrClose 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABBR_TAG",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // INIT ::= ERROR_S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INIT ::= BASEFONT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // INIT ::= TEXTAREA_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INIT ::= UL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INIT ::= TR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INIT ::= TH_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INIT ::= TD_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INIT ::= TABLE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INIT ::= SELECT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INIT ::= PRE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INIT ::= P_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INIT ::= OPTION_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INIT ::= OL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INIT ::= NEXTID_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INIT ::= META_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INIT ::= MAP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INIT ::= LINK_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INIT ::= LI_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INIT ::= ISINDEX_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INIT ::= INPUT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INIT ::= IMG_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INIT ::= HTML_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INIT ::= HN_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INIT ::= HR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INIT ::= FORM_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INIT ::= FONT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INIT ::= DL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INIT ::= DIR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INIT ::= DIV_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INIT ::= BR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INIT ::= BODY_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INIT ::= BASE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INIT ::= AREA_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INIT ::= A_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INIT ::= MENU_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INIT ::= CODE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INIT ::= FRAMESET_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INIT ::= XMP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INIT ::= VAR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INIT ::= U_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INIT ::= TT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INIT ::= TITLE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INIT ::= THEAD_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INIT ::= TBODY_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INIT ::= SUP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INIT ::= SUB_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INIT ::= STYLE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INIT ::= STRONG_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INIT ::= STRIKE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INIT ::= SPAN_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INIT ::= SMALL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INIT ::= SCRIPT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INIT ::= SAMP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INIT ::= S_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INIT ::= Q_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INIT ::= PLAINTEXT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INIT ::= PARAM_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INIT ::= OPTGROUP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INIT ::= OBJECT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INIT ::= NOSCRIPT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INIT ::= NOFRAMES_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INIT ::= LISTING_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INIT ::= LEGEND_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INIT ::= LABEL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INIT ::= KBD_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INIT ::= INS_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INIT ::= IFRAME_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INIT ::= I_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INIT ::= HEAD_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INIT ::= FRAME_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INIT ::= FIELDSET_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INIT ::= EM_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INIT ::= DT_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INIT ::= DFN_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INIT ::= DEL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INIT ::= DD_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INIT ::= COLGROUP_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INIT ::= COL_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INIT ::= CITE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INIT ::= CENTER_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INIT ::= CAPTION_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INIT ::= BUTTON_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INIT ::= BLOCKQUOTE_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INIT ::= B_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INIT ::= APPLET_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INIT ::= ADDRESS_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INIT ::= ACRONYM_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INIT ::= ABBR_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= BDO_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= BIG_TAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INIT",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

